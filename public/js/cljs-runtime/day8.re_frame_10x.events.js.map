{"version":3,"sources":["day8/re_frame_10x/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.events/fixed-after","f","G__25003","G__25004","G__25005","G__25006","mranderson048.re-frame.v0v10v2.re-frame.core/->interceptor","context","db","cljs.core/contains?","cljs.core.get_in","event","day8.re-frame-10x.events/log-trace?","trace","render-operation?","cljs.core._EQ_","component-path","clojure.string/includes?","day8.re-frame-10x.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame-10x.events/enable-tracing!","p1__25059#","re-frame.trace/register-trace-cb","G__25067","mranderson048.re-frame.v0v10v2.re-frame.core/dispatch","p__25069","vec__25070","seq__25071","cljs.core/seq","first__25072","cljs.core/first","cljs.core/next","day8.re-frame-10x.events/dissoc-in","m","k","ks","keys","temp__5802__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","day8.re-frame-10x.events/read-string-maybe","s","e25083","cljs.tools.reader.edn.read_string","e","mranderson048.re_frame.v0v10v2.re_frame.core.reg_event_db","p__25084","vec__25085","cljs.core.nth","_","width%","day8.re-frame-10x.utils.localstorage/save!","x__5087__auto__","y__5088__auto__","cljs.core/assoc-in","p__25089","vec__25090","width","p__25097","vec__25099","selected-tab","cljs.core.update_in","cljs.core/not","p__25105","vec__25109","show-panel?","day8.re-frame-10x.utils.localstorage/delete-all-keys!","js/location.reload","now-showing?","external-panel?","using-trace?","or__5002__auto__","p__25113","vec__25114","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.events/ignored-event-mw","G__25118","mranderson048.re-frame.v0v10v2.re-frame.core/path","p1__25117#","ignored-events","id","cljs.core/random-uuid","js/Date.now","p__25123","vec__25124","p__25127","vec__25128","event-str","old-event","p__25131","vec__25132","day8.re-frame-10x.events/filtered-view-trace-mw","G__25136","p1__25135#","filtered-view-trace","p__25137","vec__25138","p__25141","vec__25142","ns-str","p__25145","vec__25146","day8.re-frame-10x.events/low-level-trace-mw","G__25150","p1__25149#","p__25151","vec__25152","low-level","p__25156","vec__25159","trace-type","capture?","p__25162","vec__25163","debug?","G__25167","p1__25166#","p__25168","vec__25169","follows-events?","day8.re-frame-10x.events/mount","popup-window","popup-document","app","resize-update-scheduled?","cljs.core.atom","handle-window-resize","cljs.core/deref","G__25173","reagent.impl.batching/next-tick","height","G__25186","cljs.core/reset!","handle-window-position","pos","map__25187","cljs.core/--destructure-map","left","top","screen-left","screen-top","cljs.core.not_EQ_","G__25188","window-position-interval","unmount","G__25195","js/clearInterval","day8.re-frame-10x.styles/inject-trace-styles","day8.re_frame_10x.events.goog$module$goog$object.set","G__25196","mranderson048.reagent.v0v8v0.reagent.core.render","mranderson048.reagent.v0v8v0.reagent.core/create-class","js/setInterval","day8.re-frame-10x.view.container/devtools-inner","p__25197","map__25198","day8.re-frame-10x.events/open-debugger-window","dimensions","doc-title","js/document.title","new-window-title","goog.string/escapeString","new-window-html","w","js/window.open","d","temp__5804__auto__","el","mranderson048.reagent.v0v8v0.reagent.core/unmount-component-at-node","mranderson048.re_frame.v0v10v2.re_frame.core.reg_event_fx","ctx","G__25200","G__25201","p1__25199#","mranderson048.re-frame.v0v10v2.re-frame.core/after","p__25202","vec__25203","dim","new-dim","G__25207","G__25208","p1__25206#","p__25209","vec__25210","map__25213","G__25215","G__25216","p1__25214#","p__25217","vec__25218","map__25221","js/window.addEventListener","G__25222","mranderson048.re-frame.v0v10v2.re-frame.core/dispatch-sync","p__25223","vec__25224","unloading?","day8.re-frame-10x.events/save-filter-items","filter-items","p__25227","vec__25228","G__25234","p__25235","vec__25236","filter-input","filter-type","new-db","p1__25231#","cljs.core/some","and__5000__auto__","p1__25232#","p1__25233#","cljs.core.remove","cljs.core.conj","clojure.string/lower-case","js/parseFloat","G__25240","p__25241","vec__25242","filter-id","p1__25239#","G__25245","trace-detail-expansions","cljs.core.update","G__25247","p__25248","vec__25249","expansions","showing?","p1__25246#","G__25252","p__25253","vec__25254","categories","new-categories","clojure.set/superset?","clojure.set.difference","clojure.set.union","G__25257","p__25258","vec__25259","G__25263","p1__25262#","p__25264","vec__25265","show-epoch-traces?","day8.re-frame-10x.events/app-db-path-mw","G__25270","p1__25269#","paths","p__25272","vec__25273","path-id","path-str","path","cljs.core/sequential?","clojure.string/blank?","p__25276","vec__25277","map__25280","valid-path?","cljs.core.pr_str","p__25282","vec__25283","open?","p__25287","vec__25288","diff?","p__25292","vec__25293","p__25297","vec__25298","p__25305","vec__25306","search-string","G__25310","p__25311","vec__25312","G__25316","p__25317","vec__25319","new-paths","cljs.core.disj","G__25323","re-frame.interop/reagent-id","re-frame.db/app-db","p__25325","vec__25326","new-id","epochs","match-id","day8.re-frame-10x.utils.utils/last-in-vec","match","day8.re-frame-10x.metamorphic/matched-event","temp__5808__auto__","day8.re-frame-10x.metamorphic/app-db-after","day8.re-frame-10x.events/first-match-id","p__25331","p__25332","map__25333","vec__25334","new-traces","filtered-traces","cljs.core.filter","cljs.core.sort_by","map__25337","number-of-epochs-to-retain","events-to-ignore","cljs.core/vals","cljs.core.map","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.reduce","cljs.core/conj","day8.re-frame-10x.metamorphic/parse-traces","new-matches","previous-matches","subscription-info","day8.re-frame-10x.metamorphic/subscription-info","sub-state","day8.re-frame-10x.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv","epoch-traces","cljs.core.into","cljs.core.comp","day8.re-frame-10x.utils.utils/id-between-xf","start-of-epoch","event-handler-trace","day8.re-frame-10x.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.metamorphic/event-run?","finish-run","day8.re-frame-10x.metamorphic/finish-run?","day8.re-frame-10x.metamorphic/elapsed-time","sub-match","t","quiescent?","day8.re-frame-10x.metamorphic/quiescent?","all-matches","retained-matches","cljs.core/take-last","first-id-to-retain","retained-traces","p1__25330#","cljs.core.drop_while","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","current-index","current-id","cljs.core.juxt","cljs.core/identity","G__25338","p__25339","map__25340","temp__5806__auto__","match-ids","match-array-index","day8.re-frame-10x.utils.utils/find-index-in-vec","x","cljs.core/count","G__25341","p__25342","map__25343","G__25344","p__25345","map__25346","G__25347","current-epoch-id","app-db-before","day8.re-frame-10x.metamorphic/app-db-before","G__25348","event-to-replay","re-frame.core/dispatch","re-frame.trace/reset-tracing!","G__25349","p__25350","vec__25351","ignore?","G__25354","p__25355","vec__25356","G__25359","p__25360","vec__25361","G__25364","p__25365","vec__25366","code-open?","open?-path","G__25369","p__25370","vec__25371","form","new-form","G__25374","p__25375","vec__25376","G__25379","p__25381","vec__25382","_show-all-code?","new-show-all-code?","G__25385","p__25386","vec__25387","current-state","new-state","G__25390","p__25392","vec__25394","component","new-direction"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [mranderson048.re-frame.v0v10v2.re-frame.core :as rf]\n            [mranderson048.reagent.v0v8v0.reagent.core :as r]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [reagent.impl.batching :as batching]\n            [clojure.string :as str]\n            [goog.object]\n            [goog.string]\n            [re-frame.db]\n            [re-frame.interop]\n            [re-frame.core]\n            [re-frame.trace]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/Day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-path    (get-in trace [:tags :component-path] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-path \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/window-width\n  (fn [db [_ width]]\n    (assoc-in db [:settings :window-width] width)))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  ;; When programming here, we need to be careful about which document and window\n  ;; we are operating on, and keep in mind that the window can close without going\n  ;; through standard react lifecycle, so we hook the beforeunload event.\n  (let [app                      (.getElementById popup-document \"--re-frame-10x--\")\n        resize-update-scheduled? (atom false)\n        handle-window-resize     (fn [e]\n                                   (when-not @resize-update-scheduled?\n                                     (batching/next-tick\n                                       (fn []\n                                         (let [width  (.-innerWidth popup-window)\n                                               height (.-innerHeight popup-window)]\n                                           (rf/dispatch [:settings/external-window-resize {:width width :height height}]))\n                                         (reset! resize-update-scheduled? false)))\n                                     (reset! resize-update-scheduled? true)))\n        handle-window-position   (let [pos (atom {})]\n                                   (fn []\n                                     ;; Only update re-frame if the windows position has changed.\n                                     (let [{:keys [left top]} @pos\n                                           screen-left (.-screenX popup-window)\n                                           screen-top  (.-screenY popup-window)]\n                                       (when (or (not= left screen-left)\n                                                 (not= top screen-top))\n                                         (rf/dispatch [:settings/external-window-position {:left screen-left :top screen-top}])\n                                         (reset! pos {:left screen-left :top screen-top})))))\n        window-position-interval (atom nil)\n        unmount                  (fn [_]\n                                   (.removeEventListener popup-window \"resize\" handle-window-resize)\n                                   (some-> @window-position-interval js/clearInterval)\n                                   nil)]\n\n\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (r/render\n      [(r/create-class\n         {:display-name           \"devtools outer external\"\n          :component-did-mount    (fn []\n                                    (.addEventListener popup-window \"resize\" handle-window-resize)\n                                    (.addEventListener popup-window \"beforeunload\" unmount)\n                                    ;; Check the window position every 10 seconds\n                                    (reset! window-position-interval\n                                            (js/setInterval\n                                              handle-window-position\n                                              2000)))\n          :component-will-unmount unmount\n          :reagent-render         (fn [] [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left] :as dimensions}]\n  (let [doc-title        js/document.title\n        new-window-title (goog.string/escapeString (str \"re-frame-10x | \" doc-title))\n        new-window-html  (str \"<head><title>\"\n                              new-window-title\n                              \"</title></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")\n        ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n        ;; control over this, it will only position it within the same display that it was popped out on.\n        w                (js/window.open \"\" \"re-frame-10x-popout\"\n                                         (str \"width=\" width \",height=\" height \",left=\" left \",top=\" top\n                                              \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))\n\n        d                (.-document w)]\n    (when-let [el (.getElementById d \"--re-frame-10x--\")]\n      (r/unmount-component-at-node el))\n    (.open d)\n    (.write d new-window-html)\n    (goog.object/set w \"onload\" #(mount w d))\n    (.close d)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (open-debugger-window (get-in ctx [:db :settings :external-window-dimensions]))\n    (localstorage/save! \"external-window?\" true)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] true)\n     ;; TODO: capture the intent that the user is still interacting with devtools, to persist between reloads.\n     :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]}))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-db\n  :settings/external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ new-dim]]\n    new-dim))\n\n(rf/reg-event-db\n  :settings/external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {width :width height :height}]]\n    (assoc dim :width width :height height)))\n\n(rf/reg-event-db\n  :settings/external-window-position\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {left :left top :top}]]\n    (assoc dim :left left :top top)))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (when (get-in db [:settings :app-db-follows-events?])\n      (let [epochs   (:epochs db)\n            match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                         (utils/last-in-vec (get epochs :match-ids)))\n            match    (get-in epochs [:matches-by-id match-id])\n            event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (metam/app-db-after event)]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n  :epochs/receive-new-traces\n  (fn [{:keys [db]} [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            ;; If there are new matches found, then by definition, a quiescent trace must have been received\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n            quiescent?                 (or (seq new-matches)\n                                           (filter metam/quiescent? filtered-traces))\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        {:db       (-> db\n                       (assoc-in [:traces :all-traces] retained-traces)\n                       (update :epochs (fn [epochs]\n                                         (let [current-index (:current-epoch-index epochs)\n                                               current-id    (:current-epoch-id epochs)]\n                                           (assoc epochs\n                                             :matches retained-matches\n                                             :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                             :match-ids (mapv first-match-id retained-matches)\n                                             :parse-state parse-state\n                                             :sub-state new-sub-state\n                                             :subscription-info subscription-info\n                                             ;; Reset current epoch to the head of the list if we got a new event in.\n                                             :current-epoch-id (if (seq new-matches) nil current-id)\n                                             :current-epoch-index (if (seq new-matches) nil current-index))))))\n         :dispatch (when quiescent? [:epochs/quiescent])})\n      ;; Else\n      {:db db})))\n\n;; TODO: this code is a bit messy, needs refactoring and cleaning up.\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch   [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (utils/last-in-vec (:match-ids db))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch   [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/most-recent-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    {:db (assoc db :current-epoch-index nil\n                   :current-epoch-id nil)\n     :dispatch [:snapshot/reset-current-epoch-app-db (utils/last-in-vec (:match-ids db))]}))\n\n(rf/reg-event-db\n  :epochs/replay\n  [(rf/path [:epochs])]\n  (fn [epochs _]\n    (let [current-epoch-id (or (get epochs :current-epoch-id)\n                               (utils/last-in-vec (get epochs :match-ids)))\n          event-trace      (-> (get-in epochs [:matches-by-id current-epoch-id :match-info])\n                               (metam/matched-event))\n          app-db-before    (metam/app-db-before event-trace)\n          event            (get-in event-trace [:tags :event])]\n      (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n      (assoc epochs :replay event))))\n\n(rf/reg-event-db\n  :epochs/quiescent\n  [(rf/path [:epochs])]\n  (fn [db _]\n    (if-some [event-to-replay (:replay db)]\n      (do (re-frame.core/dispatch event-to-replay)\n          (dissoc db :replay))\n      db)))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/set-diff-visibility\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in expansions [id :open?]))]\n      (-> expansions\n          (assoc-in [id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [id :open?] open?)))))\n\n;;\n\n(rf/reg-event-db\n  :code/set-code-visibility\n  [(rf/path [:code :code-open?])]\n  (fn [code-open? [_ open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n  :code/hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    new-form))\n\n(rf/reg-event-db\n  :code/exit-hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  :code/set-show-all-code?\n  [(rf/path [:code :show-all-code?])]\n  (fn [_show-all-code? [_ new-show-all-code?]]\n    new-show-all-code?))\n\n(rf/reg-event-db\n  :code/repl-msg-state\n  [(rf/path [:code :repl-msg-state])]\n  (fn [current-state [_ new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))\n\n;;\n\n(rf/reg-event-db\n  :component/set-direction\n  [(rf/path [:component])]\n  (fn [component [_ new-direction]]\n    (assoc component :direction new-direction)))\n"],"x_google_ignoreList":[0]}
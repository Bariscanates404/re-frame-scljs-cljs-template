{"version":3,"sources":["mranderson048/re_frame/v0v10v2/re_frame/router.cljc"],"mappings":"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","names":["mranderson048.re-frame.v0v10v2.re-frame.router/later-fns","f","G__19173","mranderson048.re-frame.v0v10v2.re-frame.interop/after-render","mranderson048.re-frame.v0v10v2.re-frame.interop/next-tick","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$push$dyn","x__5350__auto__","m__5351__auto__","mranderson048.re-frame.v0v10v2.re-frame.router/push","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$add_post_event_callback$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/add-post-event-callback","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$remove_post_event_callback$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/remove-post-event-callback","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_fsm_trigger$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-fsm-trigger","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_add_event$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-add-event","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_process_1st_event_in_queue$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-process-1st-event-in-queue","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_run_next_tick$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-run-next-tick","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_run_queue$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-run-queue","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_exception$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-exception","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_pause$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-pause","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_resume$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-resume","mranderson048$re-frame$v0v10v2$re-frame$router$IEventQueue$_call_post_event_callbacks$dyn","mranderson048.re-frame.v0v10v2.re-frame.router/-call-post-event-callbacks","mranderson048.re-frame.v0v10v2.re-frame.router/IEventQueue","this","event","id","callack","trigger","arg","ex","later-fn","cljs.core/PROTOCOL_SENTINEL","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","mranderson048.re-frame.v0v10v2.re-frame.router/EventQueue","mranderson048.re-frame.v0v10v2.re-frame.router/->EventQueue","fsm-state","queue","post-event-callback-fns","_","callback-fn","cljs.core/contains?","mranderson048.re_frame.v0v10v2.re_frame.loggers.console","cljs.core.assoc","cljs.core.dissoc","mranderson048.re-frame.v0v10v2.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__19229","mranderson048.re-frame.v0v10v2.re-frame.trace/*current-trace*","*current-trace*-temp-val__19230","mranderson048.re-frame.v0v10v2.re-frame.trace/start-trace","end__18981__auto__","mranderson048.re-frame.v0v10v2.re-frame.interop/now","duration__18982__auto__","seq__19235","cljs.core/seq","cljs.core/deref","mranderson048.re-frame.v0v10v2.re-frame.trace/trace-cbs","chunk__19236","count__19237","i__19238","vec__19249","k__18983__auto__","cljs.core.nth","cb__18984__auto__","G__19255","e19252","js/java.lang.Exception","e__18985__auto__","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__19256","cljs.core/first","G__19260","e19259","cljs.core/next","vec__19262","vec__19271","new-fsm-state","action-fn","G__19265","cljs.core._EQ_","G__19274","cljs.core/empty?","cljs.core.ex_info","new-trace__18986__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.conj","event-v","cljs.core/peek","e19295","mranderson048.re-frame.v0v10v2.re-frame.events/handle","cljs.core/pop","G__19228","n","temp__5802__auto__","cljs.core/some","cljs.core/meta","cljs.core/keys","mranderson048.re-frame.v0v10v2.re-frame.interop/empty-queue","G__19289","seq__19296","chunk__19297","count__19298","i__19299","callback","cljs.core/vals","mranderson048.re-frame.v0v10v2.re-frame.router/event-queue","mranderson048.re-frame.v0v10v2.re-frame.router/dispatch","mranderson048.re-frame.v0v10v2.re-frame.router/dispatch-sync"],"sourcesContent":["(ns mranderson048.re-frame.v0v10v2.re-frame.router\n  (:require [mranderson048.re-frame.v0v10v2.re-frame.events  :refer [handle]]\n            [mranderson048.re-frame.v0v10v2.re-frame.interop :refer [after-render empty-queue next-tick]]\n            [mranderson048.re-frame.v0v10v2.re-frame.loggers :refer [console]]\n            [mranderson048.re-frame.v0v10v2.re-frame.trace   :as trace :include-macros true]))\n\n\n;; -- Router Loop ------------------------------------------------------------\n;;\n;; A call to \"re-frame.core/dispatch\" places an event on a queue for processing.\n;; A short time later, the handler registered to handle this event will be run.\n;; What follows is the implementation of this process.\n;;\n;; The task is to process queued events in a perpetual loop, one after\n;; the other, FIFO, calling the registered event-handler for each, being idle when\n;; there are no events, and firing up when one arrives.\n;;\n;; But browsers only have a single thread of control and we must be\n;; careful to not hog the CPU. When processing events one after another, we\n;; must regularly hand back control to the browser, so it can redraw, process\n;; websockets, etc. But not too regularly! If we are in a de-focused browser\n;; tab, our app will be CPU throttled. Each time we get back control, we have\n;; to process all queued events, or else something like a bursty websocket\n;; (producing events) might overwhelm the queue. So there's a balance.\n;;\n;; The processing/handling of an event happens \"asynchronously\" sometime after\n;; that event was enqueued via \"dispatch\". The original implementation of this router loop\n;; used `core.async`. As a result, it was fairly simple, and it mostly worked,\n;; but it did not give enough control. So now we hand-roll our own,\n;; finite-state-machine and all.\n;;\n;; In what follows, the strategy is this:\n;;   - maintain a FIFO queue of `dispatched` events.\n;;   - when a new event arrives, \"schedule\" processing of this queue using\n;;     goog.async.nextTick, which means it will happen \"very soon\".\n;;   - when processing events, one after the other, do ALL the currently\n;;     queued events. Don't stop. Don't yield to the browser. Hog that CPU.\n;;   - but if any new events are dispatched during this cycle of processing,\n;;     don't do them immediately. Leave them queued. Yield first to the browser,\n;;     and do these new events in the next processing cycle. That way we drain\n;;     the queue up to a point, but we never hog the CPU forever. In\n;;     particular, we handle the case where handling one event will beget\n;;     another event. The freshly begotten event will be handled next cycle,\n;;     with yielding in-between.\n;;   - In some cases, an event should not be handled until after the GUI has been\n;;     updated, i.e., after the next Reagent animation frame. In such a case,\n;;     the event should be dispatched with :flush-dom metadata like this:\n;;       (dispatch ^:flush-dom [:event-id other params])\n;;     Such an event will temporarily block all further processing because\n;;     events are processed sequentially: we handle one event completely\n;;     before we handle the ones behind it.\n;;\n;; Implementation notes:\n;;   - queue processing can be in a number of states: scheduled, running, paused\n;;     etc. So it is modeled as a Finite State Machine.\n;;     See \"-fsm-trigger\" (below) for the states and transitions.\n;;   - the scheduling is done via \"goog.async.nextTick\" which is pretty quick\n;;   - when the event has :flush-dom metadata we schedule via\n;;       \"reagent.core.after-render\"\n;;     which will run event processing after the next Reagent animation frame.\n;;\n\n;; Events can have metadata which says to pause event processing.\n;; event metadata -> \"run later\" functions\n(def later-fns\n  {:flush-dom (fn [f] (after-render #(next-tick f)))   ;; one tick after the end of the next annimation frame\n   :yield     next-tick})               ;; almost immediately\n\n\n;; Event Queue Abstraction\n(defprotocol IEventQueue\n\n  ;; -- API\n  (push [this event])\n  (add-post-event-callback [this id callack])\n  (remove-post-event-callback [this f])\n\n  ;; -- Implementation via a Finite State Machine\n  (-fsm-trigger [this trigger arg])\n\n  ;; -- Finite State Machine actions\n  (-add-event [this event])\n  (-process-1st-event-in-queue [this])\n  (-run-next-tick [this])\n  (-run-queue [this])\n  (-exception [this ex])\n  (-pause [this later-fn])\n  (-resume [this])\n  (-call-post-event-callbacks [this event]))\n\n\n;; Concrete implementation of IEventQueue\n(deftype EventQueue [#?(:cljs ^:mutable fsm-state               :clj ^:volatile-mutable fsm-state)\n                     #?(:cljs ^:mutable queue                   :clj ^:volatile-mutable queue)\n                     #?(:cljs ^:mutable post-event-callback-fns :clj ^:volatile-mutable post-event-callback-fns)]\n  IEventQueue\n\n  ;; -- API ------------------------------------------------------------------\n\n  (push [this event]         ;; presumably called by dispatch\n    (-fsm-trigger this :add-event event))\n\n  ;; register a callback function which will be called after each event is processed\n  (add-post-event-callback [_ id callback-fn]\n    (if (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: overwriting existing post event call back with id:\" id))\n    (->> (assoc post-event-callback-fns id callback-fn)\n         (set! post-event-callback-fns)))\n\n  (remove-post-event-callback [_ id]\n    (if-not (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: could not remove post event call back with id:\" id)\n      (->> (dissoc post-event-callback-fns id)\n           (set! post-event-callback-fns))))\n\n\n  ;; -- FSM Implementation ---------------------------------------------------\n\n  (-fsm-trigger\n    [this trigger arg]\n\n    ;; The following \"case\" implements the Finite State Machine.\n    ;; Given a \"trigger\", and the existing FSM state, it computes the\n    ;; new FSM state and the transition action (function).\n\n    (trace/with-trace {:op-type ::fsm-trigger}\n      (let [[new-fsm-state action-fn]\n            (case [fsm-state trigger]\n\n              ;; You should read the following \"case\" as:\n              ;; [current-FSM-state trigger] -> [new-FSM-state action-fn]\n              ;;\n              ;; So, for example, the next line should be interpreted as:\n              ;; if you are in state \":idle\" and a trigger \":add-event\"\n              ;; happens, then move the FSM to state \":scheduled\" and execute\n              ;; that two-part \"do\" function.\n              [:idle :add-event] [:scheduled #(do (-add-event this arg)\n                                                  (-run-next-tick this))]\n\n              ;; State: :scheduled  (the queue is scheduled to run, soon)\n              [:scheduled :add-event] [:scheduled #(-add-event this arg)]\n              [:scheduled :run-queue] [:running #(-run-queue this)]\n\n              ;; State: :running (the queue is being processed one event after another)\n              [:running :add-event] [:running #(-add-event this arg)]\n              [:running :pause] [:paused #(-pause this arg)]\n              [:running :exception] [:idle #(-exception this arg)]\n              [:running :finish-run] (if (empty? queue)     ;; FSM guard\n                                       [:idle]\n                                       [:scheduled #(-run-next-tick this)])\n\n              ;; State: :paused (:flush-dom metadata on an event has caused a temporary pause in processing)\n              [:paused :add-event] [:paused #(-add-event this arg)]\n              [:paused :resume] [:running #(-resume this)]\n\n              (throw (ex-info (str \"re-frame: router state transition not found. \" fsm-state \" \" trigger)\n                              {:fsm-state fsm-state, :trigger trigger})))]\n\n        ;; The \"case\" above computed both the new FSM state, and the action. Now, make it happen.\n\n        (trace/merge-trace! {:operation [fsm-state trigger]\n                             :tags      {:current-state fsm-state\n                                         :new-state     new-fsm-state}})\n        (set! fsm-state new-fsm-state)\n        (when action-fn (action-fn)))))\n\n  (-add-event\n    [_ event]\n    (set! queue (conj queue event)))\n\n  (-process-1st-event-in-queue\n    [this]\n    (let [event-v (peek queue)]\n      (try\n        (handle event-v)\n        (set! queue (pop queue))\n        (-call-post-event-callbacks this event-v)\n        (catch #?(:cljs :default :clj Exception) ex\n          (-fsm-trigger this :exception ex)))))\n\n  (-run-next-tick\n    [this]\n    (next-tick #(-fsm-trigger this :run-queue nil)))\n\n  ;; Process all the events currently in the queue, but not any new ones.\n  ;; Be aware that events might have metadata which will pause processing.\n  (-run-queue\n    [this]\n    (loop [n (count queue)]\n      (if (zero? n)\n        (-fsm-trigger this :finish-run nil)\n        (if-let [later-fn (some later-fns (-> queue peek meta keys))]  ;; any metadata which causes pausing?\n          (-fsm-trigger this :pause later-fn)\n          (do (-process-1st-event-in-queue this)\n              (recur (dec n)))))))\n\n  (-exception\n    [_ ex]\n    (set! queue empty-queue) ;; purge the queue\n    (throw ex))\n\n  (-pause\n    [this later-fn]\n    (later-fn #(-fsm-trigger this :resume nil)))\n\n  (-call-post-event-callbacks\n    [_ event-v]\n    (doseq [callback (vals post-event-callback-fns)]\n      (callback event-v queue)))\n\n  (-resume\n    [this]\n    (-process-1st-event-in-queue this)  ;; do the event which paused processing\n    (-run-queue this)))                 ;; do the rest of the queued events\n\n\n;; ---------------------------------------------------------------------------\n;; Event Queue\n;; When \"dispatch\" is called, the event is added into this event queue.  Later,\n;;  the queue will \"run\" and the event will be \"handled\" by the registered function.\n;;\n(def event-queue (->EventQueue :idle empty-queue {}))\n\n\n;; ---------------------------------------------------------------------------\n;; Dispatching\n;;\n\n(defn dispatch\n  \"Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1})\"\n  [event]\n  (if (nil? event)\n      (throw (ex-info \"re-frame: you called \\\"dispatch\\\" without an event vector.\" {}))\n      (push event-queue event))\n  nil)                                           ;; Ensure nil return. See https://github.com/Day8/re-frame/wiki/Beware-Returning-False\n\n\n(defn dispatch-sync\n  \"Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])\"\n  [event-v]\n  (handle event-v)\n  (-call-post-event-callbacks event-queue event-v)  ;; slightly ugly hack. Run the registered post event callbacks.\n  nil)                                              ;; Ensure nil return. See https://github.com/Day8/re-frame/wiki/Beware-Returning-False\n"],"x_google_ignoreList":[0]}
{"version":3,"sources":["mranderson048/re_frame/v0v10v2/re_frame/loggers.cljc"],"mappings":";AAaA;;;;;;AAAeA,0DAKb,6CAAA,2CAAA,8EAAA,gFAAA,mFAAA,8IAAA,vdAACC,4IAA0B,AAACC,iBAAsBC,8DACvB,AAACC,kBAAsBD,gEACvB,AAACE,mBAAsBF,+DACvB,kBAAI,AAASA,eACX,AAACG,mBAAsBH,SACvB,AAACD,iBAAsBC,uEACzB,mEAAA,jDAAI,AAAYA,kBACd,AAACI,sBAAyBJ;AAD5B,AAAA;;AAU7B,AAAA,0DAAA,kEAAAK,5HAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,6FAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,+FAAA,/FAAME,0GACHM,MAAQC;AADX,AAEE,GAAQ,0BAAA,AAAAE,1BAACC,0CAAWxB,yDAAQoB;AAA5B;AAAA,AAAA,MAAA,KAAAE,MAAA,CAAA,4HAAA,KAAA,/GAAmC,CAAA,wFAAiDF;;;AACpF,OAACK,8CAAM,iBAAAC,WAAA,AAAAH,gBAAQvB;AAAR,AAAA,kFAAA0B,6BAAAA,vGAACN,sCAAAA,gDAAAA;KAAgBC;;;AAH1B,CAAA,kFAAA,lFAAMP;;AAAN;AAAA,CAAA,4EAAA,WAAAC,vFAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAMA;;;;oEAAA,pEAAMY,gJAGHC;AAHH,AAIE,GAAS,AAACC,uBAAO,AAACC,qDAAW,AAACC,cAAI,AAACC,eAAKJ,cAAc,cAAA,eAAA,AAAAL,gBAAKvB,/BAAQgC,dAAKD;AAAxE;AAAA,AAAA,MAAA,KAAAT,MAAA,CAAA,kBAAA,8BAAA,KAAA;;;AACA,OAACW,mDAAMjC,wDAAQkC,gBAAMN;;AAEvB;;;8DAAA,9DAAMO;AAAN,AAAA,OAAAZ,gBAGGvB","names":["mranderson048.re-frame.v0v10v2.re-frame.loggers/loggers","cljs.core.atom","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","mranderson048.re-frame.v0v10v2.re-frame.loggers/console","seq18474","G__18475","cljs.core/first","cljs.core/next","self__5711__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply","G__18476","mranderson048.re-frame.v0v10v2.re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_","cljs.core/merge","mranderson048.re-frame.v0v10v2.re-frame.loggers/get-loggers"],"sourcesContent":["(ns mranderson048.re-frame.v0v10v2.re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, mranderson048.re-frame.v0v10v2.re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by mranderson048.re-frame.v0v10v2.re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by mranderson048.re-frame.v0v10v2.re-frame.\"\n  []\n  @loggers)\n"],"x_google_ignoreList":[0]}
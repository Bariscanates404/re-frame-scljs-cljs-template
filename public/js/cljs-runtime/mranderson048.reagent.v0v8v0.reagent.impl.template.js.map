{"version":3,"sources":["mranderson048/reagent/v0v8v0/reagent/impl/template.cljs"],"mappings":";;AAYA,AAAA,AAGA;;;;4DAAA,5DAEEA;AAEF,AAAA;;;;;;AAAA;AAAA,CAAA,4EAAA,5EAASK;AAAT,AAAA,AAAA;;;AAAA,CAAA,kFAAA,lFAASA;;AAAT,CAAA,qFAAA,rFAASA;;AAAT,CAAA,0FAAA,WAAAJ,mBAAAC,qBAAAC,7IAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;wEAAA,xEAASI;AAAT,AAAA,YAAAD;;;AAASA,AAKT,kEAAA,lEAAeE,4IAAQC;AAAvB,AACE,SAAI,cAAAC,bAAUD,qCACV,cAAAE,bAASF;;AAEf,uEAAA,vEAAeG,sJAAaH;AAA5B,AACE,SAAI,AAACD,gEAAOC,QACR,OAASA;;AAEf,sEAAA,tEAAeI,oJAAYJ;AAA3B,AACE,sFAAA,7EAAI,AAACG,qEAAYH,UACb,AAACK,qBAAKL,QACN,cAAWH,bAAcG;;AAK/B,qEAAA,WAAA,oBAAA,sBAAA,1HAAKM;AAIL,+DAAA,/DAAMC,sIAAWC,EAAEC;AAAnB,AACE,GAAM,AAA0BD,iBAAEC;AAAlC,AACE,QAAMD,EAAEC;;AADV;;;AAGF,sEAAA,tEAAMC,oJAAkBD;AAAxB,AACE,GAAI,AAACV,gEAAOU;AACV,IAAAE,qBAAa,AAACJ,6DAAUD,mEAAgB,AAACO,eAAKJ;AAA9C,AAAA,GAAA,CAAAE,sBAAA;AAEE,QAAML,mEAAgB,AAACO,eAAKJ,MACtB,AAACK,6DAAmBL;;AAH5B,qBAAAE,jBAAUC;AAAV,AACEA;;;AAGFH;;;AAEJ,mEAAA,nEAAeM,8IAASf;AAAxB,AACE,UAAK,CAAA,aAAqB,AAACgB,YAAYhB;;AAEzC,AAAA,AAEA,6DAAA,7DAAMiB,kIAAST,EAAEC,EAAES;AAAnB,AACE,IAAAC,WAAMX;AAAN,AAAA,CAAAW,SACQ,AAACT,oEAAiBD,MAClB,CAACW,sGAAAA,yGAAAA,LAAmBF,sFAAAA;;AAF5BC;;AAIF,wEAAA,xEAAMC,wJAAoBpB;AAA1B,AACE,GAAM,AAACe,iEAAQf;AAAGA;;AAAlB,GACM,AAACD,gEAAOC;AAAG,OAACa,eAAKb;;AADvB,GAEM,AAACqB,qBAAKrB;AAAG,sFAAA,/EAACsB,oBAAUL,gEAAcjB;;AAFxC,GAGM,AAACuB,sBAAMvB;AAAG,OAACwB,qBAAQxB;;AAHzB,GAIM,AAACK,qBAAKL;AAAG;mCAAOyB;AAAP,AACE,OAACC,8CAAM1B,EAAEyB;;;IADJA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAJtB,AAMY,OAACD,qBAAQxB;;;;;;;;AAKvB,4EAAA,5EAAK2B;AAEL,6EAAA,7EAAMC,kKAAyBnB;AAA/B,AACE,GAAI,AAACV,gEAAOU;AACV,IAAAE,qBAAa,AAACJ,6DAAUoB,0EAAuB,AAACd,eAAKJ;AAArD,AAAA,GAAA,CAAAE,sBAAA;AAEE,QAAML,mEAAgB,AAACO,eAAKJ,MACtB,AAACK,6DAAmBL;;AAH5B,qBAAAE,jBAAUC;AAAV,AACEA;;;AAGFH;;;AAEJ,oEAAA,pEAAMoB,gJAAgBrB,EAAEC,EAAES;AAA1B,AACE,IAAAY,WAAMtB;AAAN,AAAA,CAAAsB,SACQ,AAACF,2EAAwBnB,MACzB,AAACW,sEAAmBF;;AAF5BY;;AAIF,+EAAA,/EAAMC,sKAA2B/B;AAAjC,AACE,GAAM,AAACe,iEAAQf;AAAGA;;AAAlB,GACM,AAACD,gEAAOC;AAAG,OAACa,eAAKb;;AADvB,GAEM,AAACqB,qBAAKrB;AAAG,6FAAA,tFAACsB,oBAAUO,uEAAqB7B;;AAF/C,GAGM,AAACuB,sBAAMvB;AAAG,OAACwB,qBAAQxB;;AAHzB,GAIM,AAACK,qBAAKL;AAAG;mCAAOyB;AAAP,AACE,OAACC,8CAAM1B,EAAEyB;;;IADJA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAJtB,AAMY,OAACD,qBAAQxB;;;;;;;;AAEvB,0DAAA,1DAAMgC,4HAAMxB,EAAEC,EAAES;AAAhB,AACE,IAAAe,WAAM,eAAA,bAAI,MAAA,LAAMzB,iBAASA;AAAzB,AAAA,CAAAyB,SACQxB,KAAES;;AADVe;;AAGF,0DAAA,1DAAMC,4HAAM1B,EAAEC;AAAd,AACE,GAAI,MAAA,LAAMD;AAAV;;AAAiB,QAAMA,EAAEC;;;AAE3B;;;;kEAAA,lEAAM0B,4IAGHC,MAAMC;AAHT,AAIE,IAAMC,KAAG,UAAA,TAAGD;IACNE,SAAM,UAAA,TAAGF;AADf,AAEE,IAAAG,WAAQJ;IAARI,eAAA,4OAAAA,1OAEE,EAAK,GAAA,OAAA,NAAOF,mBACP,2FAAA,1FAAM,AAAA,gFAAKF,mBAChB,8CAAAI,SAAA,vDAACC,yGAAUH;AAJb,AAAA,oBAOEC;AACA,qDAAAC,aAAA,3DAACC,mHAAa,iBAAMC,YAAU,AAAA,sFAAQN;AAAxB,AACE,GAAI,cAAA,bAAMM;AAAWH;;AAAM,4DAAA,RAAKA,wDAAUG;;;;AAT5DF;;;AAWJ,qEAAA,6EAAAG,lJAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAA0CR;aAA1C,AAAAU,4CAAAF,eAAA,pEAA+BL;AAA/B,AACE,GAAI,AAAChB,sBAAMgB;2OACJA,lEACA,AAACS,+CAAOC,rGACR,kDAAA,lDAACC,nHACD,2DAAA,pDAACT,8CAAML;;AACZA;;;AAEJ,mEAAA,nEAAMe,8IAAef,MAAMC;AAA3B,AACE,IAAMD,+IAAUA,nEACAW,hEACA,gEAAA,hEAACZ,0IAAaE;AAF9B,AAGE,oBAAI,UAAA,TAAGA;AACL,OAACN,6EAA0BK;;AAC3B,OAAChB,sEAAmBgB;;;AAK1B,GAAA,QAAAgB,0CAAAC,kDAAAC,yDAAAC,iEAAAC,sEAAAC,+EAAAC;AAAA;AAAA,AAAA,mEAAA,nEAASC;;AAKT,qFAAA,iFAAA,WAAA,WAAA,YAAA,gBAAA,gBAAA,xOAAKC;AAGL,8EAAA,9EAAeC,oKACZC;AADH,AAEE,OAACC,0BAAUH,mFAAgCE;;AAE7C,AAAA,AAEA,0EAAA,0HAAAE,pMAAME,4JACHC,KAAKC,eAAeC,UAAUC;AADjC,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAApB,4BAAAoB;eAAA,AAAAnB,4CAAAmB,eAAA,tEACmDM;AADnD,AAEE,GAAA,GAAQ,8CAAA,mGAAA,/IAAK,CAAYJ,SAAK,UAAA,TAAGK,mCACvB,AAACX,4EAAmB,MAAA,LAAGM,sBACvB,OAASC,iCACT,OAASC;AAEjB,AACE,WAAA,VAAIC,4BAAwBF;;AAC5B,MAAA,LAAID,gBAAYC;;AAChB,GAAM,AAACK,oBAAIF;AAAX,AACE,QAACA,yCAAAA,yDAAAA,lBAASH,sCAAAA;;AADZ;;;AAwBF,IAAMM,aAAW,MAAA,LAAGP;AAApB,AACE,GAAI,AAACQ,gDAAKD,WAAWL;AAEnB,0EAAA,nEAACO;AAAD,AAAwB,QAACC,6GAAAA,wHAAAA,bAA0BP,qGAAAA;;;AACnD,IAAMQ,2BAAyB,CAAG,AAACC,gBAAML,cACR,MAAA,LAAGP;IAC9Ba,oBAAyB,CAAG,AAACD,gBAAMX,kBACRU;AAHjC,AAIE,WAAA,VAAIR,4BAAwBF;;AAC5B,MAAA,LAAID,gBAAYC;;AAChB,GAAM,AAACK,oBAAIF;AAAX,AACE,CAACA,yCAAAA,yDAAAA,lBAASH,sCAAAA;;AADZ;;AAEA,MAAA,LAAID,yBAAqBa;;AACzB,aAAA,LAAIb,uBAAmBa;;;;AAEjC,+EAAA,/EAAMH,sKAA2BI;AAAjC,AACE,oBAAM,OAAA,NAAGA;AAAT,AACE,OAAA,oBAAA,1BAAIA;;AACJ,IAAMb,iBAAe,OAAA,NAAGa;IAClBZ,YAAU,OAAA,NAAGY;IAEbd,OAAK,CAACR,iGAAAA,wGAAAA,TAAcsB,qFAAAA;AAH1B,AAIE,GAAM,AAACN,gDAAKP,eAAeC;AAA3B,AACE,mHAAA,5GAACH,wEAAqBC,KAAKC,eAAeC,UAAUY;;AADtD;;;AANJ;;;AASF,yEAAA,zEAAMC,0JAAqBD,MAAKE,UAAUC;AAA1C,AACE,OAAA,NAAIH,wBAAmB,AAAA,AAAIG;;AAG3B,oBAAU,OAAA,NAAGH;AAAb;AAAA,AACE,OAAA,oBAAA,1BAAIA;;AACJ,mEAAA,nEAACL;AAAD,AAAwB,OAACC,6EAA0BI;;;;AACrD,QAACE,0CAAAA,6CAAAA,LAAUC,0BAAAA;;AAEb,wEAAA,xEAAMC,wJACHJ,MAAKK;AADR,AAIE,oBAAM,iBAAAC,oBAAK,GAAA,YAAA,XAAOD;AAAZ,AAAA,GAAAC;AAAA,IAAAA,wBACK,uBAAA,vBAAiBD;AADtB,AAAA,oBAAAC;AAEK,8BAAA,vBAAiBD;;AAFtBC;;;AAAAA;;;AAAN,AAGE,oBAAQ5B;AAAR;AAAA,AAAA,MAAA,KAAA6B,MAAA,CAAA,kBAAA,8DAAA,KAAA;;;AAEA,IAAMtE,IAAE,SAAA,RAAGoE;IACLG,QAAM,eAAA,bAAI,MAAA,LAAMvE,eAAMA;IACtBiE,YAAU,SAAA,RAAGG;AAFnB,AAGE,oBAAU,OAAA,NAAGL;AAAb;AAAA,AAEE,OAAA,mBAAA,zBAAIA;;AACJ,OAAA,NAAIA,wBAAmBQ;;;AACzB,OAAA,NAAIR,6BAAwBQ;;AAC5B,eAAA,RAAWH;;AACX,IAAAI,WAAMJ;AAAN,AAAA,CAAAI,SAAA,kBACoBD;;AADpB,CAAAC,SAAA,cAAA,WAAAC;AAAA,AAEiB,8FAAAA,vFAACT,uEAAoBD,MAAKE;;;AAF3CO;;AAdJ;;;AAkBF,mEAAA,nEAAME,8IAAeX;AAArB,AACE,cAAA,mBAAA,zBAAIA;;AAEN,4EAAA,5EAAeY,gKAAkB7F;AAAjC,AACE,IAAA8F,WAAM9F;AAAN,AAAA,QAAA8F;KAAA;KAAA;AAAA;;;;AAAA;;;;AAIF,yEAAA,zEAAKC;AAEL,AAAA,AAEA,gEAAA,2CAAA,oEAAA,eAAA,mKAAA,2JAAA,5fAAKC,oRAEoBnB,uKACEe,0IAExB,WAAKK,KAAKC,KAAKZ,QAAQa;AAAvB,AACE,IAAMlB,QAAKmB;AAAX,AACE,AAACf,sEAAmBJ,MAAKK;;AACzB,QAACe,gGAAAA,+HAAAA,jCAAaJ,4GAAAA,vGAAKC,4GAAAA,vGAAKZ,4GAAAA,pGAAQa,4GAAAA;;AAEvC,mEAAA,nEAAMG;AAAN,AAEE,GAAM,2EAAA,1EAAMP;AAAZ,AACE,CAAMA,yEAAoB,AAACQ,iEAAkBP;;AAD/C;;AAEAD;;AAKF,+DAAA,/DAAMS,sIAAWC;AAAjB,AACE,IAAAC,aAAqB,6GAAKD,fAAW5F,/EAAK,+EAAA,/EAACgG,qBAAWrH,pCAAQsH;UAA9D,AAAAH,4CAAAD,WAAA,IAAA,jEAAOE;SAAP,AAAAD,4CAAAD,WAAA,IAAA,hEAAWpE;aAAX,AAAAqE,4CAAAD,WAAA,IAAA,pEAAcnE;IACRA,aAAM,oBAAA,KAAA,vBAAU,WAAA,VAAMA,sBACd,8BAAA,KAAA,nCAACwE,uBAAexE;AAF9B,AAGE,oBAAQqE;AAAR;AAAA,AAAA,MAAA,KAAApB,MAAA,CAAA,0KAAA,KAAA,7JAAY,CAAA,yEAAA,ZAAsBiB,gBACjB,AAACO;;;AAJpB,iBAKaJ,WACFtE,aACGC,sBAGC,gDAAA,hDAACoC,qDAAQ,YAAA,ZAAUiC;;AAEpC,iEAAA,jEAAMK,0IAAajH;AAAnB,AAGE,IAAA,AAAK,qDAAA,9CAAC8C,4CAAI9C;gBAAV,QAAAkH,JACqB9B;AADrB,AAAA;;AAGF,6DAAA,7DAAM+B,kIAASnH;AAAf,AACE,GAAM,AAACqB,qBAAKrB;AAAZ,AACE,OAACiH,+DAAYjH;;AADf;;;AAGF,kEAAA,lEAAMoH,4IAAclG;AAApB,AACE,IAAAP,qBAAY,2DAAI,AAAC0G,eAAKnG,1EAAGiG;AAAzB,AAAA,GAAA,CAAAxG,sBAAA;AAEE,8GAAIO,5CAAE,8CAAA,IAAA,lDAACyF,3DAAWQ;;AAFpB,QAAAxG,JAAUF;AAAV,AACEA;;;AAGJ,kEAAA,lEAAM6G,4IAAcV,IAAI1F;AAAxB,AACE,IAAMqG,IAAE,AAACC,6DAAcZ;cAAvB,VACMtB,oBAAkBpE;AADxB,AAEE,IAAAuG,2BAAgB,AAACL,gEAAalG;AAA9B,AAAA,GAAA,CAAAuG,4BAAA;AAAA;AAAA,gBAAAA,ZAAYC;AAAZ,AACE,SAAA,RAAIpC,iBAAaoC;;;AACnB,OAACC,8CAAoBJ,EAAEjC;;AAE3B,sEAAA,tEAAMsC,oJAAkB3B;AAAxB,AACE,IAAM7D,QAAM,iDAAA,IAAA,rDAACuE,4CAAIV;IACX4B,WAAS,EAAI,UAAA,TAAMzF,oBAAO,AAACf,qBAAKe;IAChCkD,UAAQ,AAAClE,sEAAmB,kBAAA,hBAAIyG,UAASzF;IACzC+D,cAAY,CAAA,MAAK,YAAA,IAAA,dAAI0B;AAH3B,AAIE,IAAAJ,2BAAgB,AAACL,gEAAanB;AAA9B,AAAA,GAAA,CAAAwB,4BAAA;AAAA;AAAA,gBAAAA,ZAAYC;AAAZ,AACE,gEAAA,hEAAC1F,wDAAKsD,cAAcoC;;;AACtB,QAACrB,gGAAAA,mKAAAA,rEAAaJ,gJAAAA,3IAAK6B,gJAAAA,vGAAexC,gJAAAA,xIAAQa,gJAAAA;;AAE9C,uEAAA,vEAAM4B,sJACHR;AADH,AAEE,IAAAS,WAAM,AAAClI;AAAP,AAAA,CAAAkI,SAAA,UACYT;;AADZ,CAAAS,SAAA,QAAA;;AAAA,CAAAA,SAAA,WAAA;;AAAAA;;AAKF,oEAAA,pEAAKC;AAEL,kEAAA,lEAAMC,4IAAclI;AAApB,AACE,IAAAW,qBAAY,AAACJ,6DAAU0H,kEAAejI;AAAtC,AAAA,GAAA,CAAAW,sBAAA;AAEE,QAAMsH,kEAAejI,KAAE,AAACwG,6DAAUxG;;AAFpC,QAAAW,JAAUwH;AAAV,AACEA;;;AAGJ,oEAAA,pEAAMC,gJAAgBC,OAAOpC,KAAKqC;AAAlC,AACE,IAAMpC,OAAK,QAAA,PAAGmC;AAAd,AACE,IAAMjG,QAAM,uDAAA,vDAACuE,4CAAIV,KAAKqC;IAChBT,WAAS,EAAI,UAAA,TAAMzF,oBAAO,AAACf,qBAAKe;IAChCkD,UAAQ,AAACnC,iEAAc,kBAAA,hBAAI0E,UAASzF,YAAOiG;IAC3ClC,cAAY,CAAGmC,QAAM,YAAA,IAAA,dAAIT;AAH/B,AAIE,GAAI,AAAChC,0EAAiBK;AACpB,IAAAqC,kHAAK,AAACjC,mEAAeL,KAAKC,KAAKZ,QAAQa,5LACnC,oBAAA,pBAACqC,gNAAU,AAACnB,eAAKpB;AADrB,AAAA,kMAAAsC,qFAAAA,/QAEIE,8FAAAA,wGAAAA;;AACJ,IAAMf,MAAI,2DAAI,AAACL,eAAKpB,1EAAMkB;IACpBuB,IAAE,EAAI,QAAA,PAAMhB,cACRpC,QACA,gEAAA,hEAACtD,wDAAKsD,cAAcoC;AAH9B,AAIE,QAACrB,gGAAAA,yHAAAA,3BAAaJ,sGAAAA,jGAAKC,sGAAAA,jGAAKwC,sGAAAA,pGAAEvC,sGAAAA;;;AAEpC,8DAAA,9DAAMwC,oIAAUC;AAAhB,AACE,AACE,mDAAK,AAACC,qBAAQ,WAAK7I;AAAL,AACE,GAAI,AAACyE,oBAAIzE;AACP,IAAM8I,IAAE,AAACC,wDAAc/I;AAAvB,AACE,IAAAgJ,WAAMF;AAAN,AAAA,QAAAE;KAAA;AAAWhJ;;;;AAAE,OAACiJ,+CAAOH;;;;AACvB9I;;GAAI4I;;;AAG1B,AAAA,gEAAA,wEAAAM,xIAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mGAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,qGAAA,rGAAME,gHAAYtI,EAAI2I;AAAtB,AACE,sHAAA,oEAAA,tIAAK,AAACnI,8CAAMoI,cAAID,WAAU,AAAClB,4DAASzH,QAAQ,AAAC8F;;;AAD/C,CAAA,wFAAA,xFAAMwC;;AAAN;AAAA,CAAA,kFAAA,WAAAC,7FAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAA3C,eAAA2C;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,SAAAD;;;AAAA,AAGA,iEAAA,jEAAMM,0IAAa7I;;AAAnB,AACE,GAAQ,sBAAA,rBAAM,AAAC6D,gBAAM7D;AAArB;AAAA,AAAA,MAAA,KAAAsE,MAAA,CAAA,iNAAA,KAAA,pMAAyB,uJAAA,vJAACwE,mGAAW9I;;;AACrC,IAAM0F,MAAI,8CAAA,IAAA,lDAACD,4CAAIzF;AAAf,AACE,GAAQ,AAACd,oEAAWwG;AAApB;AAAA,AAAA,MAAA,KAAApB,MAAA,CAAA,qMAAA,KAAA,xLAAyB,uJAAA,vJAACwE,mGAAW9I;;;AACrC,GACE,mCAAA,nCAAC+I,oFAAuBrD;AACxB,OAACgB,oEAAiB1G;;AAFpB,GAIE,AAACf,qEAAYyG;AACb,IAAMkC,IAAE,AAACjI,eAAK+F;IACRsD,MAAI,UAAA,VAAUpB;AADpB,AAEE,IAAAqB,WAAMD;AAAN,AAAA,QAAAC;KAAA;AACK,8IAAA,vIAAC/B,kEAAe,AAACF,gEAAaY,GAAG5H;;;KADtC;AAEI,IAAMgF,OAAK,8CAAA,IAAA,lDAACS,4CAAIzF;AAAhB,AAEE,GAAQ,6CAAA,7CAACkJ,iDAAMtB;AAAf;AAAA,AAAA,MAAA,KAAAtD,MAAA,CAAA,oMAAA,KAAA,vLAAkB,uJAAA,vJAACwE,mGAAW9I;;;AAC9B,GAAQ,EAAI,OAASgF,uBAAM,AAACzB,oBAAIyB;AAAhC;AAAA,AAAA,MAAA,KAAAV,MAAA,CAAA,6MAAA,KAAA,hMACQ,uJAAA,vJAACwE,mGAAW9I;;;AACpB,yEAAA,mBAAA,rFAACkH,4EAAyBlC,OAAMhF;;;;AAKpC,eAAO,oBAAA,pBAACsH,uGAAW,+CAAA,/CAAC6B,6CAAKvB,MAAIoB,KACV,0EAAA,1EAACzH,8CAAM,sBAAA,tBAAC+F,oBAAUtH,YAAS,AAACmJ,6CAAKvB,EAAE,OAAA,NAAKoB,qBACzC,AAAC7C,eAAKnG;;;;;;AArB9B,GAuBE,gBAAWrB,fAAc+G;AACzB,+EAAA,xEAACwB,kEAAexB,IAAI1F;;AAxBtB,AA0BQ,OAACoG,gEAAaV,IAAI1F;;;;;;;;AAE9B,AAAA,AACA,AAAA,AAEA,gEAAA,hEAAMuH,wIAAYzI;AAAlB,AACE,GAAM,AAACe,iEAAQf;AAAGA;;AAAlB,GACM,AAACsK,wBAAQtK;AAAG,OAAC+J,+DAAY/J;;AAD/B,GAEM,AAACuK,qBAAKvK;AAAG,AACE,QAACwK,oGAAAA,uGAAAA,LAAiBxK,oFAAAA;;;AAHnC,GAKM,AAACD,gEAAOC;AAAG,OAACa,eAAKb;;AALvB,GAMM,EAAA,GAAA,MAAA,SAAA,EAAA,EAAA,CAAA,wCAAA,mBAAA,CAAAyK,gCAAA,kCAAA,KAAA,EAAA,EAAA,wCAAA,AAAAC,gEAAA,QAAA,AAAAA,tCAAYC,wEAAAA,5SAAiB3K,mBAAAA,4FAAAA,2CAAAA,qGAAAA,wEAAAA;AAAG,OAAC4K,wGAAO5K;;AAN9C,AAOYA;;;;;;;;AAEd,CAAM6K,iEAAgBpC;AAEtB,gEAAA,hEAAMqC,wIAAY3C;AAAlB,AACE,IAAM4C,IAAE,AAACC,mDAAW7C;AAApB,AACE,IAAA8C,wBAAY,AAASF;AAArB,AAAA,cAAA,VAAUG;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AACE,CAAMH,EAAEG,WAAE,AAACzC,8DAAW,CAAMsC,EAAEG;;AADhC,eAAA,WAAA,VAAUA;;;;AAAV;;;;AAEAH;;AAEJ,oEAAA,pEAAMI,gJAAgBhD,EAAE3H;AAAxB,AACE,IAAMuK,IAAE,AAACC,mDAAW7C;AAApB,AACE,IAAA8C,wBAAY,AAASF;AAArB,AAAA,cAAA,VAAUG;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AACE,IAAME,YAAI,CAAML,EAAEG;AAAlB,AACE,GAAM,EAAK,AAACZ,wBAAQc,gBACT,+EAAA,9EAAM,AAAChE,gEAAagE;AAD/B,AAEE,GAAA,YAAA,dAAI5K;;AAFN;;AAGA,CAAMuK,EAAEG,WAAE,AAACzC,8DAAW2C;;AAL1B,eAAA,WAAA,VAAUF;;;;AAAV;;;;AAMAH;;AAEJ,sEAAA,tEAAMP,oJAAkBxK;AAAxB,AACE,UAAA,NAAMsL;IAAND,aACoB,wDAAA,xDAACI;AAAD,AAAqB,OAACN,kEAAenL,EAAEsL;;UAD3D,AAAA3E,4CAAA0E,WAAA,IAAA,jEACOE;cADP,AAAA5E,4CAAA0E,WAAA,IAAA,rEACWG;AADX,AAEE,oBAAMA;AAAN,AACE,GAAAE;AAAA,AAAA,AAAA,EAAAC,qDAAAC,yDAAAC,cAAA,CAAA,YAAM,uJAAA,6CAAA,pMAAC7B,mGAAWhK;;AAAlB;;AADF;;AAGA,oBAAM,KAAA,JAAGsL;AAAT,AACE,GAAAI;AAAA,AAAA,AAAA,EAAAC,qDAAAC,yDAAAC,cAAA,CAAA,YAAM,uJAAA,vJAAC7B,mGAAWhK;;AAAlB;;AADF;;AAEAuL;;AA6BJ,kEAAA,lEAAMlF,4IAAcJ,KAAKC,KAAKZ,QAAQa;AAAtC,AACE,IAAA2F,WAAM,CAAG,AAAC/G,gBAAMkB,QAAME;AAAtB,AAAA,QAAA2F;KAAA;AAEI,OAACnE,8CAAoBzB,KAAKZ;;;KAF9B;AAII,OAACqC,8CAAoBzB,KAAKZ,QACtB,AAACmD,8DAAW,6DAAA,7DAAC9B,4CAAIV,KAAKE;;;;AAE5B,2DAAA,pDAAQwB,yDACA,AAACrG,oBAAU,WAAKyJ,EAAEtK,EAAES;AAAT,AACE,GAAM,CAAIT,KAAE0F;AAAZ,AACE,AAAO4E,OAAE,AAACtC,8DAAWvH;;AADvB;;AAEA6J;GAHb,CAIe7E,KAAKZ,SAASW","names":["mranderson048.reagent.v0v8v0.reagent.impl.template/re-tag","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","mranderson048.reagent.v0v8v0.reagent.impl.template/NativeWrapper","mranderson048.reagent.v0v8v0.reagent.impl.template/->NativeWrapper","mranderson048.reagent.v0v8v0.reagent.impl.template/named?","x","cljs.core/Keyword","cljs.core/Symbol","mranderson048.reagent.v0v8v0.reagent.impl.template/hiccup-tag?","mranderson048.reagent.v0v8v0.reagent.impl.template/valid-tag?","cljs.core/ifn?","mranderson048.reagent.v0v8v0.reagent.impl.template/prop-name-cache","mranderson048.reagent.v0v8v0.reagent.impl.template/cache-get","o","k","mranderson048.reagent.v0v8v0.reagent.impl.template/cached-prop-name","temp__5806__auto__","k'","cljs.core/name","mranderson048.reagent.v0v8v0.reagent.impl.util/dash-to-camel","mranderson048.reagent.v0v8v0.reagent.impl.template/js-val?","goog/typeOf","mranderson048.reagent.v0v8v0.reagent.impl.template/kv-conv","v","G__18282","mranderson048.reagent.v0v8v0.reagent.impl.template/convert-prop-value","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","mranderson048.reagent.v0v8v0.reagent.impl.template/custom-prop-name-cache","mranderson048.reagent.v0v8v0.reagent.impl.template/cached-custom-prop-name","mranderson048.reagent.v0v8v0.reagent.impl.template/custom-kv-conv","G__18288","mranderson048.reagent.v0v8v0.reagent.impl.template/convert-custom-prop-value","mranderson048.reagent.v0v8v0.reagent.impl.template/oset","G__18289","mranderson048.reagent.v0v8v0.reagent.impl.template/oget","mranderson048.reagent.v0v8v0.reagent.impl.template/set-id-class","props","id-class","id","class","G__18292","cljs.core.assoc","old-class","p__18295","map__18296","cljs.core/--destructure-map","cljs.core.get","mranderson048.reagent.v0v8v0.reagent.impl.template/stringify-class","cljs.core.filter","cljs.core/identity","clojure.string.join","mranderson048.reagent.v0v8v0.reagent.impl.template/convert-props","js/mranderson048","js/mranderson048.reagent","js/mranderson048.reagent.v0v8v0","js/mranderson048.reagent.v0v8v0.reagent","js/mranderson048.reagent.v0v8v0.reagent.impl","js/mranderson048.reagent.v0v8v0.reagent.impl.template","js/mranderson048.reagent.v0v8v0.reagent.impl.template.find-dom-node","mranderson048.reagent.v0v8v0.reagent.impl.template/find-dom-node","mranderson048.reagent.v0v8v0.reagent.impl.template/these-inputs-have-selection-api","mranderson048.reagent.v0v8v0.reagent.impl.template/has-selection-api?","input-type","cljs.core/contains?","p__18299","map__18301","mranderson048.reagent.v0v8v0.reagent.impl.template/input-node-set-value","node","rendered-value","dom-value","component","on-write","js/document","cljs.core/fn?","node-value","cljs.core.not_EQ_","mranderson048.reagent.v0v8v0.reagent.impl.batching/do-after-render","mranderson048.reagent.v0v8v0.reagent.impl.template/input-component-set-value","existing-offset-from-end","cljs.core/count","new-cursor-offset","this","mranderson048.reagent.v0v8v0.reagent.impl.template/input-handle-change","on-change","e","mranderson048.reagent.v0v8v0.reagent.impl.template/input-render-setup","jsprops","and__5000__auto__","js/Error","value","G__18308","p1__18305#","mranderson048.reagent.v0v8v0.reagent.impl.template/input-unmount","mranderson048.reagent.v0v8v0.reagent.impl.template/input-component?","G__18309","mranderson048.reagent.v0v8v0.reagent.impl.template/reagent-input-class","mranderson048.reagent.v0v8v0.reagent.impl.template/input-spec","argv","comp","first-child","mranderson048.reagent.v0v8v0.reagent.impl.component/*current-component*","mranderson048.reagent.v0v8v0.reagent.impl.template/make-element","mranderson048.reagent.v0v8v0.reagent.impl.template/reagent-input","mranderson048.reagent.v0v8v0.reagent.impl.component/create-class","mranderson048.reagent.v0v8v0.reagent.impl.template/parse-tag","hiccup-tag","vec__18311","cljs.core.nth","tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","mranderson048.reagent.v0v8v0.reagent.impl.component/comp-name","mranderson048.reagent.v0v8v0.reagent.impl.template/try-get-key","e18314","mranderson048.reagent.v0v8v0.reagent.impl.template/get-key","mranderson048.reagent.v0v8v0.reagent.impl.template/key-from-vec","cljs.core/meta","mranderson048.reagent.v0v8v0.reagent.impl.template/reag-element","c","mranderson048.reagent.v0v8v0.reagent.impl.component/as-class","temp__5808__auto__","key","js/module$node_modules$react$index.createElement","mranderson048.reagent.v0v8v0.reagent.impl.template/fragment-element","hasprops","js/module$node_modules$react$index.Fragment","mranderson048.reagent.v0v8v0.reagent.impl.template/adapt-react-class","G__18318","mranderson048.reagent.v0v8v0.reagent.impl.template/tag-name-cache","mranderson048.reagent.v0v8v0.reagent.impl.template/cached-parse","s","mranderson048.reagent.v0v8v0.reagent.impl.template/native-element","parsed","first","G__18322","cljs.core/with-meta","mranderson048.reagent.v0v8v0.reagent.impl.template/as-element","p","mranderson048.reagent.v0v8v0.reagent.impl.template/str-coll","coll","clojure.walk/prewalk","n","mranderson048.reagent.v0v8v0.reagent.impl.util/fun-name","G__18325","cljs.core.symbol","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","mranderson048.reagent.v0v8v0.reagent.impl.template/hiccup-err","seq18330","G__18331","cljs.core/first","self__5711__auto__","msg","cljs.core/str","mranderson048.reagent.v0v8v0.reagent.impl.template/vec-to-elem","mranderson048.reagent.v0v8v0.reagent.impl.template.hiccup_err","cljs.core/keyword-identical?","pos","G__18335","cljs.core._EQ_","cljs.core.subs","cljs.core/vector?","cljs.core/seq?","mranderson048.reagent.v0v8v0.reagent.impl.template/expand-seq-check","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str","mranderson048.reagent.v0v8v0.reagent.impl.component/as-element","mranderson048.reagent.v0v8v0.reagent.impl.template/expand-seq","a","cljs.core.into_array","n__5593__auto__","i","mranderson048.reagent.v0v8v0.reagent.impl.template/expand-seq-dev","val","vec__18344","ctx","res","derefed","mranderson048.reagent.v0v8v0.reagent.ratom/check-derefs","mranderson048.reagent.v0v8v0.reagent.debug/has-console","mranderson048.reagent.v0v8v0.reagent.debug/tracking","mranderson048.reagent.v0v8v0.reagent.debug/track-console","js/console","G__18347"],"sourcesContent":["(ns mranderson048.reagent.v0v8v0.reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [mranderson048.reagent.v0v8v0.reagent.impl.util :as util :refer [is-client]]\n            [mranderson048.reagent.v0v8v0.reagent.impl.component :as comp]\n            [mranderson048.reagent.v0v8v0.reagent.impl.batching :as batch]\n            [mranderson048.reagent.v0v8v0.reagent.ratom :as ratom]\n            [mranderson048.reagent.v0v8v0.reagent.interop :refer-macros [$ $!]]\n            [mranderson048.reagent.v0v8v0.reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n(declare as-element)\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (aset (cached-custom-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id ($ id-class :id)\n        class ($ id-class :class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      (assoc :class (let [old-class (:class props)]\n                      (if (nil? old-class) class (str class \" \" old-class)))))))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (filter identity)\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (let [props (-> props\n                  stringify-class\n                  (set-id-class id-class))]\n    (if ($ id-class :custom)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Specialization for input components\n\n;; This gets set from mranderson048.reagent.v0v8v0.reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          ;; Default to the root node within this component\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [this jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v ($ jsprops :value)\n          value (if (nil? v) \"\" v)\n          on-change ($ jsprops :onChange)]\n      (when-not ($ this :cljsInputLive)\n        ;; set initial value\n        ($! this :cljsInputLive true)\n        ($! this :cljsDOMValue value))\n      ($! this :cljsRenderedValue value)\n      (js-delete jsprops \"value\")\n      (doto jsprops\n        ($! :defaultValue value)\n        ($! :onChange #(input-handle-change this on-change %))))))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js {:name tag\n         :id id\n         :class class\n         ;; Custom element names must contain hyphen\n         ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n         :custom (not= -1 (.indexOf tag \"-\"))}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn fragment-element [argv]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (convert-prop-value (if hasprops props))\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (oset jsprops \"key\" key))\n    (make-element argv react/Fragment jsprops first-child)))\n\n(defn adapt-react-class\n  [c]\n  (doto (->NativeWrapper)\n    ($! :name c)\n    ($! :id nil)\n    ($! :class nil)))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (input-component? comp)\n        (-> [(reagent-input) argv comp jsprops first-child]\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v)\n\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (assert (or (string? comp) (fn? comp))\n                      (hiccup-err v \"Expected React component in\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          ;; Apply metadata (e.g. :key) to the outermost element.\n          ;; Metadata is probably used only with sequeneces, and in that case\n          ;; only the key of the outermost element matters.\n          (recur (with-meta [(subs n 0 pos)\n                             (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                            (meta v)))))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"],"x_google_ignoreList":[0]}
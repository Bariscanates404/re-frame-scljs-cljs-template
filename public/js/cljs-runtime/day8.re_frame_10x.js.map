{"version":3,"sources":["day8/re_frame_10x.cljs"],"mappings":"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","names":["js/goog.define","day8.re-frame-10x/debug?","day8.re-frame-10x/fiber-component-path","fiber","name","G__25397","parent","G__25398","path","G__25399","res","cljs.core/empty?","day8.re-frame-10x/component-path","c","temp__5802__auto__","G__25404","reagent.impl.component/component-path","day8.re-frame-10x/comp-name","n","or__5002__auto__","G__25413","reagent.impl.util/fun-name","day8.re-frame-10x/operation-name","cljs.core/memoize","component","cljs.core/last","clojure.string.split","day8.re-frame-10x/static-fns","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__25425","re-frame.trace/*current-trace*","*current-trace*-temp-val__25426","re-frame.trace/start-trace","end__23563__auto__","re-frame.interop/now","duration__23564__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","_","reagent.impl.batching/mark-rendered","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__23565__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.interop/reagent-id","cljs.core.map","day8.re_frame_10x.goog$module$goog$object.get","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.real-custom-wrapper","day8.re-frame-10x/real-custom-wrapper","reagent.impl.component/custom-wrapper","js/day8.re-frame-10x.real-next-tick","day8.re-frame-10x/real-next-tick","reagent.impl.batching/next-tick","js/day8.re-frame-10x.real-schedule","day8.re-frame-10x/real-schedule","reagent.impl.batching/schedule","js/day8.re-frame-10x.do-after-render-trace-scheduled?","day8.re-frame-10x/do-after-render-trace-scheduled?","cljs.core.atom","day8.re-frame-10x/monkey-patch-reagent","reagent.impl.component/static-fns","key","f","G__25460","cljs.core/Keyword","*current-trace*-orig-val__25462","*current-trace*-temp-val__25463","G__25468","*current-trace*-orig-val__25470","*current-trace*-temp-val__25471","*current-trace*-orig-val__25472","*current-trace*-temp-val__25473","*current-trace*-orig-val__25479","*current-trace*-temp-val__25480","reagent.impl.batching/render-queue","*current-trace*-orig-val__25477","*current-trace*-temp-val__25478","*current-trace*-orig-val__25484","*current-trace*-temp-val__25485","day8.re-frame-10x/init-tracing!","day8.re-frame-10x/resizer-style","draggable-area","day8.re-frame-10x/ease-transition","day8.re-frame-10x/devtools-outer","opts","position","mranderson048.reagent.v0v8v0.reagent.core.atom","panel-width%","G__25501","mranderson048.re-frame.v0v10v2.re-frame.core/subscribe","showing?","G__25502","dragging?","pin-to-bottom?","selected-tab","G__25505","window-width","js/window.innerWidth","handle-window-resize","G__25507","mranderson048.re-frame.v0v10v2.re-frame.core/dispatch","e","window-width-val","G__25508","cljs.core/reset!","handle-keys","combo-key?","tag-name","entering-input?","cljs.core/contains?","and__5000__auto__","cljs.core._EQ_","G__25515","handle-mousemove","cljs.core/deref","x","y","new-window-width","G__25521","handle-mouse-up","mranderson048.reagent.v0v8v0.reagent.core/create-class","js/window.addEventListener","js/window.removeEventListener","left","transition","day8.re-frame-10x.view.container/devtools-inner","day8.re-frame-10x/panel-div","id","panel","js/document","new-panel","js/window.focus","day8.re-frame-10x/inject-devtools!","day8.re-frame-10x.styles/inject-trace-styles","mranderson048.reagent.v0v8v0.reagent.core.render","day8.re-frame-10x/traced-result","trace-id","fragment-id","trace","cljs.core/first","p1__25552#","cljs.core.filter","cljs.core.get_in","mranderson048.re-frame.v0v10v2.re-frame.db/app-db","day8.re-frame-10x/init-db!","day8.re-frame-10x.db/init-db","day8.re-frame-10x/factory-reset!","G__25569"],"sourcesContent":["(ns day8.re-frame-10x\n  (:require [day8.re-frame-10x.styles :as styles]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.subs]\n            [day8.re-frame-10x.events]\n            [day8.re-frame-10x.db :as trace.db]\n            [re-frame.trace :as trace :include-macros true]\n            [clojure.string :as str]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.impl.util :as util]\n            [reagent.impl.component :as component]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [goog.object :as gob]\n            [re-frame.interop :as interop]\n            [mranderson048.re-frame.v0v10v2.re-frame.core :as rf]\n            [mranderson048.reagent.v0v8v0.reagent.core :as r]))\n\n(goog-define debug? false)\n\n;; from https://github.com/reagent-project/reagent/blob/3fd0f1b1d8f43dbf169d136f0f905030d7e093bd/src/reagent/impl/component.cljs#L274\n(defn fiber-component-path [fiber]\n  (let [name   (some-> fiber\n                       ($ :type)\n                       ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path   (some-> parent\n                       fiber-component-path\n                       (str \" > \"))\n        res    (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  (if-let [fiber (some-> c ($ :_reactInternalFiber))]\n    (fiber-component-path fiber)\n    (component/component-path c)))\n\n(defn comp-name [c]\n  (let [n (or (component-path c)\n              (some-> c .-constructor util/fun-name))]\n    (if-not (empty? n)\n      n\n      \"\")))\n\n(def operation-name (memoize (fn [component] (last (str/split (component-path component) #\" > \")))))\n\n(def static-fns\n  {:render\n   (fn mp-render []                                         ;; Monkeypatched render\n     (this-as c\n       (trace/with-trace {:op-type   :render\n                          :tags      {:component-path (component-path c)}\n                          :operation (operation-name c)}\n                         (if util/*non-reactive*\n                           (reagent.impl.component/do-render c)\n                           (let [rat        ($ c :cljsRatom)\n                                 _          (batch/mark-rendered c)\n                                 res        (if (nil? rat)\n                                              (ratom/run-in-reaction #(reagent.impl.component/do-render c) c \"cljsRatom\"\n                                                                     batch/queue-render reagent.impl.component/rat-opts)\n                                              (._run rat false))\n                                 cljs-ratom ($ c :cljsRatom)] ;; actually a reaction\n                             (trace/merge-trace!\n                               {:tags {:reaction      (interop/reagent-id cljs-ratom)\n                                       :input-signals (when cljs-ratom\n                                                        (map interop/reagent-id (gob/get cljs-ratom \"watching\" :none)))}})\n                             res)))))})\n\n\n(defonce real-custom-wrapper reagent.impl.component/custom-wrapper)\n(defonce real-next-tick reagent.impl.batching/next-tick)\n(defonce real-schedule reagent.impl.batching/schedule)\n(defonce do-after-render-trace-scheduled? (atom false))\n\n(defn monkey-patch-reagent []\n  (let [#_#_real-renderer reagent.impl.component/do-render\n        ]\n\n\n    #_(set! reagent.impl.component/do-render\n            (fn [c]\n              (let [name (comp-name c)]\n                (js/console.log c)\n                (trace/with-trace {:op-type   :render\n                                   :tags      {:component-path (component-path c)}\n                                   :operation (last (str/split name #\" > \"))}\n                                  (real-renderer c)))))\n\n    (set! reagent.impl.component/static-fns static-fns)\n\n    (set! reagent.impl.component/custom-wrapper\n          (fn [key f]\n            (case key\n              :componentWillUnmount\n              (fn [] (this-as c\n                       (trace/with-trace {:op-type   key\n                                          :operation (last (str/split (comp-name c) #\" > \"))\n                                          :tags      {:component-path (component-path c)\n                                                      :reaction       (interop/reagent-id ($ c :cljsRatom))}})\n                       (.call (real-custom-wrapper key f) c c)))\n\n              (real-custom-wrapper key f))))\n\n    (set! reagent.impl.batching/next-tick\n          (fn [f]\n            ;; Schedule a trace to be emitted after a render if there is nothing else scheduled after that render.\n            ;; This signals the end of the epoch.\n\n            #_(swap! do-after-render-trace-scheduled?\n                     (fn [scheduled?]\n                       (js/console.log \"Setting up scheduled after\" scheduled?)\n                       (if scheduled?\n                         scheduled?\n                         (do (reagent.impl.batching/do-after-render ;; a do-after-flush would probably be a better spot to put this if it existed.\n                               (fn []\n                                 (js/console.log \"Do after render\" reagent.impl.batching/render-queue)\n                                 (reset! do-after-render-trace-scheduled? false)\n                                 (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                   (trace/with-trace {:op-type :reagent/quiescent}))))\n                             true))))\n            (real-next-tick (fn []\n                              (trace/with-trace {:op-type :raf}\n                                                (f)\n                                                (trace/with-trace {:op-type :raf-end})\n                                                (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                                  (trace/with-trace {:op-type :reagent/quiescent}))\n\n                                                )))))\n\n    #_(set! reagent.impl.batching/schedule\n            (fn []\n              (reagent.impl.batching/do-after-render\n                (fn []\n                  (when @do-after-render-trace-scheduled?\n                    (trace/with-trace {:op-type :do-after-render})\n                    (reset! do-after-render-trace-scheduled? false))))\n              (real-schedule)))))\n\n\n(defn init-tracing!\n  \"Sets up any initial state that needs to be there for tracing. Does not enable tracing.\"\n  []\n  (monkey-patch-reagent))\n\n\n(defn resizer-style [draggable-area]\n  {:position \"absolute\" :z-index 2 :opacity 0\n   :left     (str (- (/ draggable-area 2)) \"px\") :width \"10px\" :height \"100%\" :top \"0px\" :cursor \"col-resize\"})\n\n(def ease-transition \"left 0.2s ease-out, top 0.2s ease-out, width 0.2s ease-out, height 0.2s ease-out\")\n\n(defn devtools-outer [opts]\n  ;; Add clear button\n  ;; Filter out different trace types\n  (let [position             (r/atom :right)\n        panel-width%         (rf/subscribe [:settings/panel-width%])\n        showing?             (rf/subscribe [:settings/show-panel?])\n        dragging?            (r/atom false)\n        pin-to-bottom?       (r/atom true)\n        selected-tab         (rf/subscribe [:settings/selected-tab])\n        window-width         (r/atom js/window.innerWidth)\n        handle-window-resize (do (rf/dispatch [:settings/window-width js/window.innerWidth]) ;; Set initial\n                                 (fn [e]\n                                   ;; N.B. I don't think this should be a perf bottleneck.\n                                   (let [window-width-val js/window.innerWidth]\n                                     (rf/dispatch [:settings/window-width window-width-val])\n                                     (reset! window-width window-width-val))))\n        handle-keys          (fn [e]\n                               (let [combo-key?      (or (.-ctrlKey e) (.-metaKey e) (.-altKey e))\n                                     tag-name        (.-tagName (.-target e))\n                                     key             (.-key e)\n                                     entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                                 (when (and (not entering-input?) combo-key?)\n                                   (cond\n                                     (and (= key \"h\") (.-ctrlKey e))\n                                     (do (rf/dispatch [:settings/user-toggle-panel])\n                                         (.preventDefault e))))))\n        handle-mousemove     (fn [e]\n                               (when @dragging?\n                                 (let [x                (.-clientX e)\n                                       y                (.-clientY e)\n                                       new-window-width js/window.innerWidth]\n                                   (.preventDefault e)\n                                   (rf/dispatch [:settings/panel-width% (/ (- new-window-width x) new-window-width)])\n                                   (reset! window-width new-window-width))))\n        handle-mouse-up      (fn [e] (reset! dragging? false))]\n    (r/create-class\n      {:component-did-mount    (fn []\n                                 (js/window.addEventListener \"keydown\" handle-keys)\n                                 (js/window.addEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.addEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.addEventListener \"resize\" handle-window-resize))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys)\n                                 (js/window.removeEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.removeEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.removeEventListener \"resize\" handle-window-resize))\n       :display-name           \"devtools outer\"\n       :reagent-render         (fn []\n                                 (let [draggable-area 10\n                                       left           (if @showing? (str (* 100 (- 1 @panel-width%)) \"%\")\n                                                                    (str @window-width \"px\"))\n                                       transition     (if @dragging?\n                                                        \"\"\n                                                        ease-transition)]\n                                   [:div.panel-wrapper\n                                    {:style {:position \"fixed\" :width \"0px\" :height \"0px\" :top \"0px\" :left \"0px\" :z-index 99999999}}\n                                    [:div.panel\n                                     {:style {:position   \"fixed\" :z-index 1 :box-shadow \"rgba(0, 0, 0, 0.3) 0px 0px 4px\" :background \"white\"\n                                              :display    \"flex\"\n                                              :left       left :top \"0px\" :width (str (* 100 @panel-width%) \"%\") :height \"100%\"\n                                              :transition transition}}\n                                     [:div.panel-resizer (when @showing? {:style         (resizer-style draggable-area)\n                                                                          :on-mouse-down #(reset! dragging? true)})]\n                                     [container/devtools-inner opts]]]))})))\n\n\n(defn panel-div []\n  (let [id    \"--re-frame-10x--\"\n        panel (.getElementById js/document id)]\n    (if panel\n      panel\n      (let [new-panel (.createElement js/document \"div\")]\n        (.setAttribute new-panel \"id\" id)\n        (.appendChild (.-body js/document) new-panel)\n        (js/window.focus new-panel)\n        new-panel))))\n\n(defn inject-devtools! []\n  (styles/inject-trace-styles js/document)\n  (r/render [devtools-outer {:panel-type :inline\n                             :debug?     debug?}] (panel-div)))\n\n(defn traced-result [trace-id fragment-id]\n  ;; TODO: this is not terribly efficient, figure out how to get the index of the trace directly.\n  (let [trace (first (filter #(= trace-id (:id %)) (get-in @mranderson048.re-frame.v0v10v2.re-frame.db/app-db [:traces :all-traces])))]\n    (get-in trace [:tags :code fragment-id :result])))\n\n(defn init-db! []\n  (trace.db/init-db debug?))\n\n(defn ^:export factory-reset! []\n  (rf/dispatch [:settings/factory-reset]))\n"],"x_google_ignoreList":[0]}
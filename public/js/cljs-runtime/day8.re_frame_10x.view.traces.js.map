{"version":3,"sources":["day8/re_frame_10x/view/traces.cljs"],"mappings":"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","names":["day8.re-frame-10x.view.traces/query->fn","query","cljs.core._EQ_","trace","clojure.string/includes?","clojure.string/lower-case","day8.re-frame-10x.view.traces/add-filter","filter-items","filter-input","filter-type","G__23327","mranderson048.re-frame.v0v10v2.re-frame.core/dispatch","day8.re-frame-10x.view.traces/render-traces","visible-traces","trace-detail-expansions","cljs.core/deref","debug?","G__23329","mranderson048.re-frame.v0v10v2.re-frame.core/subscribe","cljs.core.doall","cljs.core.map_indexed","p__23332","map__23333","cljs.core/--destructure-map","cljs.core.get","index","op-type","id","operation","tags","duration","show-row?","cljs.core.get_in","op-name","cljs.core/vector?","cljs.core/second","cljs.core/List","G__23336","clojure.string.join","G__23337","cljs.core/Keyword","ev","cljs.core/name","day8.re-frame-10x.utils.pretty-print-condensed/truncate","day8.re-frame-10x.utils.pretty-print-condensed/str->namespaced-sym","temp__5804__auto__","vec__23348","seq__23349","cljs.core/seq","first__23350","cljs.core/first","cljs.core/next","_","params","or__5002__auto__","cljs.core.map","day8.re-frame-10x.utils.pretty-print-condensed/pretty-condensed","day8.re_frame_10x.utils.pretty_print_condensed.truncate_string","js/console","tag-str","cljs.core.prn_str","cljs.core.subs","day8.re-frame-10x.view.traces/render","mranderson048.reagent.v0v8v0.reagent.core.atom","G__23365","input-error","categories","G__23367","G__23368","beginning","G__23370","end","G__23372","traces","G__23373","current-traces","G__23374","show-epoch-traces?","G__23375","p1__23360#","p1__23362#","p1__23363#","p1__23364#","toggle-category-fn","G__23377","traces-to-filter","G__23378","cljs.core.remove","and__5000__auto__","cljs.core.filter","cljs.core/contains?","cljs.core.apply","cljs.core/every-pred","cljs.core.sort_by","save-query","js/isNaN","js/parseFloat","cljs.core/reset!","G__23386","G__23387","G__23388","G__23389","day8.re-frame-10x.utils.re-com/checkbox","G__23391","cljs.core.keyword","day8.re-frame-10x.view.components/search-input","item","G__23393","day8.re-frame-10x.view.components/autoscroll-list","G__23394","cljs.core/count","G__23395"],"sourcesContent":["(ns day8.re-frame-10x.view.traces\n  (:require [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [clojure.string :as str]\n            [mranderson048.reagent.v0v8v0.reagent.core :as r]\n            [mranderson048.re-frame.v0v10v2.re-frame.core :as rf]\n            [day8.re-frame-10x.utils.re-com :as rc]))\n\n(defn query->fn [query]\n  (if (= :contains (:filter-type query))\n    (fn [trace]\n      (str/includes? (str/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                     (:query query)))\n    (fn [trace]\n      (< (:query query) (:duration trace)))))\n\n(defn add-filter [filter-items filter-input filter-type]\n  (rf/dispatch [:traces/add-filter filter-input filter-type]))\n\n(defn render-traces [visible-traces filter-items filter-input trace-detail-expansions]\n  (let [debug? @(rf/subscribe [:settings/debug?])]\n    (doall\n      (->>\n        visible-traces\n        (map-indexed (fn [index {:keys [op-type id operation tags duration] :as trace}]\n                       (let [show-row? (get-in @trace-detail-expansions [:overrides id]\n                                               (:show-all? @trace-detail-expansions))\n                             op-name   (if (vector? operation)\n                                         (second operation)\n                                         operation)\n                             #_#__ (js/console.log (devtools/header-api-call tags))]\n                         (list [:tr {:key      id\n                                     :on-click #(rf/dispatch [:traces/toggle-trace id])\n                                     :class    (str/join \" \" [\"trace--trace\"\n                                                              (case op-type\n                                                                :sub/create \"trace--sub-create\"\n                                                                :sub/run \"trace--sub-run\"\n                                                                :sub/dispose \"trace--sub-run\"\n                                                                :event \"trace--event\"\n                                                                :render \"trace--render\"\n                                                                :re-frame.router/fsm-trigger \"trace--fsm-trigger\"\n                                                                nil)])}\n                                [:td.trace--toggle\n                                 [:button.expansion-button (if show-row? \"\u25bc\" \"\u25b6\")]]\n                                [:td.trace--op\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-type) :contains)\n                                                               (.stopPropagation ev))}\n                                  (str op-type)]]\n                                [:td.trace--op-string\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-name) :contains)\n                                                               (.stopPropagation ev))}\n                                  (pp/truncate 20 :middle (pp/str->namespaced-sym op-name)) \" \"\n                                  [:span\n                                   {:style {:opacity 0.5\n                                            :display \"inline-block\"}}\n                                   (when-let [[_ & params] (or (get tags :query-v)\n                                                               (get tags :event))]\n                                     (->> (map pp/pretty-condensed params)\n                                          (str/join \", \")\n                                          (pp/truncate-string :middle 40)))]]]\n                                (if debug?\n                                  [:td.trace--meta\n                                   (:reaction (:tags trace)) \"/\" id]\n                                  [:td.trace--meta\n\n                                   (.toFixed duration 1) \" ms\"])]\n                               (when show-row?\n                                 [:tr.trace--details {:key       (str id \"-details\")\n                                                      :tab-index 0}\n                                  [:td]\n                                  [:td.trace--details-tags {:col-span 2\n                                                            :on-click #(.log js/console trace)}\n                                   [:div.trace--details-tags-text\n                                    (let [tag-str (prn-str tags)]\n                                      (str (subs tag-str 0 400)\n                                           (when (< 400 (count tag-str))\n                                             \" ...\")))]]\n                                  [:td.trace--meta.trace--details-icon\n                                   {:on-click #(.log js/console tags)}]])))))))))\n\n(defn render []\n  (let [filter-input            (r/atom \"\")\n        filter-items            (rf/subscribe [:traces/filter-items])\n        filter-type             (r/atom :contains)\n        input-error             (r/atom false)\n        categories              (rf/subscribe [:traces/categories])\n        trace-detail-expansions (rf/subscribe [:traces/expansions])\n        beginning               (rf/subscribe [:epochs/beginning-trace-id])\n        end                     (rf/subscribe [:epochs/ending-trace-id])\n        traces                  (rf/subscribe [:traces/all-visible-traces])\n        current-traces          (rf/subscribe [:traces/current-event-visible-traces])\n        show-epoch-traces?      (rf/subscribe [:trace-panel/show-epoch-traces?])]\n    (fn []\n      (let [toggle-category-fn #(rf/dispatch [:traces/toggle-categories %])\n            traces-to-filter   (if @show-epoch-traces?\n                                 @current-traces\n                                 @traces)\n            visible-traces     (cond->> traces-to-filter\n                                        ;; Remove cached subscriptions. Could add this back in as a setting later\n                                        ;; but it's pretty low signal/noise 99% of the time.\n                                        true (remove (fn [trace] (and (= :sub/create (:op-type trace))\n                                                                      (get-in trace [:tags :cached?]))))\n                                        (seq @categories) (filter (fn [trace] (when (contains? @categories (:op-type trace)) trace)))\n                                        (seq @filter-items) (filter (apply every-pred (map query->fn @filter-items)))\n                                        true (sort-by :id))\n            save-query         (fn [_]\n                                 (if (and (= @filter-type :slower-than)\n                                          (js/isNaN (js/parseFloat @filter-input)))\n                                   (reset! input-error true)\n                                   (do\n                                     (reset! input-error false)\n                                     (add-filter filter-items @filter-input @filter-type))))]\n\n        [:div.tab-contents\n         [:div.filter\n          [:div.filter-control\n           [:ul.filter-categories \"show: \"\n            [:li.filter-category {:class    (when (contains? @categories :event) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:event}])}\n             \"events\"]\n            [:li.filter-category {:class    (when (contains? @categories :sub/run) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:sub/run :sub/create :sub/dispose}])}\n             \"subscriptions\"]\n            [:li.filter-category {:class    (when (contains? @categories :render) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:render}])}\n             \"reagent\"]\n            [:li.filter-category {:class    (when (contains? @categories :re-frame.router/fsm-trigger) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:re-frame.router/fsm-trigger :componentWillUnmount}])}\n             \"internals\"]]\n           [rc/checkbox\n            :model show-epoch-traces?\n            :on-change #(rf/dispatch [:trace-panel/update-show-epoch-traces? %])\n            :label \"Only show traces for this epoch?\"]\n           [:div.filter-fields\n            [:select {:value     @filter-type\n                      :on-change #(reset! filter-type (keyword (.. % -target -value)))}\n             [:option {:value \"contains\"} \"contains\"]\n             [:option {:value \"slower-than\"} \"slower than\"]]\n            [:div.filter-control-input {:style {:margin-left 10}}\n             [components/search-input {:on-save   save-query\n                                       :on-change #(reset! filter-input (.. % -target -value))}]\n             (if @input-error\n               [:div.input-error {:style {:color \"red\" :margin-top 5}}\n                \"Please enter a valid number.\"])]]]\n          [:ul.filter-items\n           (map (fn [item]\n                  ^{:key (:id item)}\n                  [:li.filter-item\n                   [:button.button\n                    {:style    {:margin 0}\n                     :on-click #(rf/dispatch [:traces/remove-filter (:id item)])}\n                    (:filter-type item) \": \" [:span.filter-item-string (:query item)]]])\n                @filter-items)]]\n         [components/autoscroll-list {:class \"panel-content-scrollable\" :scroll? true}\n          [:table\n           [:thead>tr\n            [:th {:style {:padding 0}}\n             [:button.text-button\n              {:style    {:cursor \"pointer\"}\n               :on-click #(rf/dispatch [:traces/toggle-all-expansions])}\n              (if (:show-all? @trace-detail-expansions) \"-\" \"+\")]]\n            [:th \"operations\"]\n            [:th\n             (str (count visible-traces) \" traces\")\n             [:span \"(\" [:button.text-button {:on-click #(rf/dispatch [:epochs/reset])} \"clear\"] \")\"]]\n            [:th {:style {:text-align \"right\"}} \"meta\"]]\n           [:tbody (render-traces visible-traces filter-items filter-input trace-detail-expansions)]]]]))))\n"],"x_google_ignoreList":[0]}
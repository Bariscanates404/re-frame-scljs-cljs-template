{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$less.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/less.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$less\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it\u2019s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE\u2019s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we\u2019ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it\u2019s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","RULES","VALUE","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","PARENS_MODE","end","contains","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","excludeEnd","returnBegin","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","beginKeywords","endsWithParent","RULE_MODE","INTERP_IDENT_RE","illegal","AT_RULE_MODE","returnEnd","VAR_RULE_MODE","variants","SELECTOR_MODE","case_insensitive"]
}

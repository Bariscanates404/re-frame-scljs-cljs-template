{"version":3,"sources":["mranderson048/reagent/v0v8v0/reagent/debug.cljs"],"mappings":";AAGA,AAAaA,yDAAY,QAAAC;AAEzB,sDAAA,tDAAcC;AAEd,GAAA,QAAAC,0CAAAC,kDAAAC,yDAAAC,iEAAAC,uEAAAC;AAAA;AAAA,AAAA,AAASC,sDAAS,6CAAA,7CAACC;;AAEnB,GAAA,QAAAP,0CAAAC,kDAAAC,yDAAAC,iEAAAC,uEAAAI;AAAA;AAAA,AAAA,AAASC,2DACP,qBAAA,JAAMC;AAAN,AACE,CAAM,AAAQA,SACR;mCAAOC;AAAP,AACE,yIAAA,mFAAA,rNAACC,0DAAMN,oDAASO,oKAAkBC,iEAAK,AAACC,8CAAMC,cAAIL;;;IAD7CA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAEb,CAAM,AAASD,UACT;mCAAOC;AAAP,AACE,yIAAA,mFAAA,rNAACC,0DAAMN,oDAASO,sKAAmBC,iEAAK,AAACC,8CAAMC,cAAIL;;;IAD9CA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAEbD;;;AAEJ,4DAAA,5DAAMO,gIAAgBC;AAAtB,AACE,uDAAA,tDAAMnB;;AACN,0EAAA,1EAACoB,sBAAOb;;AACR,CAACY,kCAAAA,oCAAAA;;AACD,YAAA,AAAAE,RAAMC,wBAAOf;AAAb,AACE,0EAAA,1EAACa,sBAAOb;;AACR,uDAAA,tDAAMP;;AACNsB","names":["mranderson048.reagent.v0v8v0.reagent.debug/has-console","js/console","mranderson048.reagent.v0v8v0.reagent.debug/tracking","js/mranderson048","js/mranderson048.reagent","js/mranderson048.reagent.v0v8v0","js/mranderson048.reagent.v0v8v0.reagent","js/mranderson048.reagent.v0v8v0.reagent.debug","js/mranderson048.reagent.v0v8v0.reagent.debug.warnings","mranderson048.reagent.v0v8v0.reagent.debug/warnings","cljs.core.atom","js/mranderson048.reagent.v0v8v0.reagent.debug.track-console","mranderson048.reagent.v0v8v0.reagent.debug/track-console","o","args","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/conj","cljs.core.apply","cljs.core/str","mranderson048.reagent.v0v8v0.reagent.debug/track-warnings","f","cljs.core/reset!","cljs.core/deref","warns"],"sourcesContent":["(ns mranderson048.reagent.v0v8v0.reagent.debug\n  (:require-macros [mranderson048.reagent.v0v8v0.reagent.debug]))\n\n(def ^:const has-console (exists? js/console))\n\n(def ^boolean tracking false)\n\n(defonce warnings (atom nil))\n\n(defonce track-console\n  (let [o #js{}]\n    (set! (.-warn o)\n          (fn [& args]\n            (swap! warnings update-in [:warn] conj (apply str args))))\n    (set! (.-error o)\n          (fn [& args]\n            (swap! warnings update-in [:error] conj (apply str args))))\n    o))\n\n(defn track-warnings [f]\n  (set! tracking true)\n  (reset! warnings nil)\n  (f)\n  (let [warns @warnings]\n    (reset! warnings nil)\n    (set! tracking false)\n    warns))\n"],"x_google_ignoreList":[0]}
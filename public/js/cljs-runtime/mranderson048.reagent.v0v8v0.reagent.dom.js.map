{"version":3,"sources":["mranderson048/reagent/v0v8v0/reagent/dom.cljs"],"mappings":";;AASA,GAAA,QAAAA,0CAAAC,kDAAAC,yDAAAC,iEAAAC,qEAAAC;AAAA;AAAA,AAAA,oDAAA,pDAAmBC;;AAEnB,GAAA,QAAAN,0CAAAC,kDAAAC,yDAAAC,iEAAAC,qEAAAG;AAAA;AAAA,AAAA,AAAmBC,iDAAM,6CAAA,7CAACC;;AAE1B,wDAAA,xDAAOC,wHAAcC;AAArB,AACE,AAACC,mDAAMJ,+CAAMK,iBAAOF;;AACpB,OAACG,2DAAiCH;;AAEpC,uDAAA,vDAAOI,sHAAaC,KAAKL,UAAUM;AAAnC,AACE,IAAAC,4CAAUE;IAAVD,4CAAA;AAAA,AAAA,4EAAAA,3EAAUC;;AAAV,IAAA,AACE,OAACC,2CAAiB,CAACL,qCAAAA,uCAAAA,mBAAML,UACvB;AAAA,AACE,IAAAW,4CAAUF;IAAVG,4CAAA;AAAA,AAAA,4EAAAA,3EAAUH;;AAAV,IAAA,AACE,4HAAA,5HAACR,mDAAMJ,+CAAMgB,gBAAMb,6FAAWK,KAAKL;;AACnC,AAACc;;AACD,GAAI,GAAA,aAAA,ZAAOR;AACT,QAACA,yCAAAA,2CAAAA;;AADH;;UAHF,AAAA,4EAAAK,3EAAUF;;UAHhB,AAAA,4EAAAF,3EAAUE;;AASZ,+DAAA,/DAAOM,sIAAqBV,KAAKL;AAAjC,AACE,2EAAA,pEAACI,qDAAYC,KAAKL;;AAEpB,AAAA;;;;;;;;kDAAA,0DAAAgB,5GAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gFAAA,hFAAMD,2FAOFb,KAAKL;AAPT,AAQG,oGAAA,7FAACoB,8EAAOf,KAAKL;;;AARhB,CAAA,gFAAA,hFAAMkB,2FASFb,KAAKL,UAAUM;AATnB,AAUG,AAACe;;AACD,IAAMC,IAAE;AAAA,AACE,OAACC,8DAAgB,EAAI,AAACC,oBAAInB,OAAM,CAACA,qCAAAA,uCAAAA,mBAAMA;;AADjD,AAEE,OAACD,qDAAYkB,EAAEtB,UAAUM;;;AAb9B,CAAA,0EAAA,1EAAMY;;AAAN,AAeA,qEAAA,rEAAMO,kJAA2BzB;AAAjC,AACE,OAACD,sDAAaC;;AAEhB;;;oDAAA,pDAAM0B,gHAEHC;AAFH,AAGE,OAACC,gDAAsBD;;AAEzB,CAAME,mEAAmBH;AAEzB;;;;;;;;;;;4DAAA,5DAAMI;AAAN,AAWE,AAACT;;AACD,IAAAU,mBAAA,AAAAC,cAAU,eAAA,AAAAa,fAACC,+BAAMjD;IAAjBoC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,cAAA,AAAAD,yDAAAE,nEAAQS;AAAR,AAAA,AACE,AAACG,8CAAMhC,6DAAoB6B;;AAD7B;AAAA,eAAAb;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,cAAA,AAAAI,gBAAAX,1BAAQa;AAAR,AAAA,AACE,AAACG,8CAAMhC,6DAAoB6B;;AAD7B;AAAA,eAAA,AAAAD,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAZF","names":["js/mranderson048","js/mranderson048.reagent","js/mranderson048.reagent.v0v8v0","js/mranderson048.reagent.v0v8v0.reagent","js/mranderson048.reagent.v0v8v0.reagent.dom","js/mranderson048.reagent.v0v8v0.reagent.dom.imported","mranderson048.reagent.v0v8v0.reagent.dom/imported","js/mranderson048.reagent.v0v8v0.reagent.dom.roots","mranderson048.reagent.v0v8v0.reagent.dom/roots","cljs.core.atom","mranderson048.reagent.v0v8v0.reagent.dom/unmount-comp","container","cljs.core.swap_BANG_","cljs.core/dissoc","js/module$node_modules$react_dom$index.unmountComponentAtNode","mranderson048.reagent.v0v8v0.reagent.dom/render-comp","comp","callback","*always-update*-orig-val__18368","*always-update*-temp-val__18369","mranderson048.reagent.v0v8v0.reagent.impl.util/*always-update*","js/module$node_modules$react_dom$index.render","*always-update*-orig-val__18372","*always-update*-temp-val__18373","cljs.core/assoc","mranderson048.reagent.v0v8v0.reagent.impl.batching/flush-after-render","mranderson048.reagent.v0v8v0.reagent.dom/re-render-component","var_args","G__18384","mranderson048.reagent.v0v8v0.reagent.dom/render","js/Error","mranderson048.reagent.v0v8v0.reagent.dom.render","mranderson048.reagent.v0v8v0.reagent.ratom/flush!","f","mranderson048.reagent.v0v8v0.reagent.impl.template/as-element","cljs.core/fn?","mranderson048.reagent.v0v8v0.reagent.dom/unmount-component-at-node","mranderson048.reagent.v0v8v0.reagent.dom/dom-node","this","js/module$node_modules$react_dom$index.findDOMNode","mranderson048.reagent.v0v8v0.reagent.impl.template/find-dom-node","mranderson048.reagent.v0v8v0.reagent.dom/force-update-all","seq__18399","cljs.core/seq","chunk__18400","count__18401","i__18402","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","cljs.core/deref","cljs.core/vals","cljs.core.apply"],"sourcesContent":["(ns mranderson048.reagent.v0v8v0.reagent.dom\n  (:require [react-dom :as react-dom]\n            [mranderson048.reagent.v0v8v0.reagent.impl.util :as util]\n            [mranderson048.reagent.v0v8v0.reagent.impl.template :as tmpl]\n            [mranderson048.reagent.v0v8v0.reagent.impl.batching :as batch]\n            [mranderson048.reagent.v0v8v0.reagent.ratom :as ratom]\n            [mranderson048.reagent.v0v8v0.reagent.debug :refer-macros [dbg]]\n            [mranderson048.reagent.v0v8v0.reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container [comp container])\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  (react-dom/findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"],"x_google_ignoreList":[0]}
{"version":3,"sources":["mranderson048/re_frame/v0v10v2/re_frame/registrar.cljc"],"mappings":";AASA,0DAAA,iFAAA,yDAAA,2DAAA,0DAAA,zTAAKA;AAKL,AAAKC,4EAAmB,6CAAA,7CAACC;AAGzB,AAAA,gEAAA,wEAAAC,xIAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4FAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4FAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4FAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8FAAA,9FAAMD,yGAEFE;AAFJ,AAGG,mDAAA,AAAAC,5CAACC,4DAAKR,2EAAkBM;;;AAH3B,CAAA,8FAAA,9FAAMF,yGAKFE,KAAKG;AALT,mDAMO,4CAAA,AAAAF,5CAACC,4DAAKR,2EAAkBM,1LACxB,OAACE,yLAAIC;;;AAPZ,CAAA,8FAAA,9FAAML,yGASFE,KAAKG,GAAGC;AATZ,AAUG,IAAMC,UAAQ,AAACC,4FAAYN,KAAKG;AAAhC,AACE,GAAMI;AAAN,AACE,oBAAM,iBAAAC,oBAAKJ;AAAL,AAAA,oBAAAI;AAAe,mBAAA,XAAMH;;AAArBG;;;AAAN,AACE,6FAAA,yGAAA,kEAAA,xQAACC,sNAA+B,4CAAKT,kCAAkCG;;AADzE;;AADF;;AAGAE;;;AAdL,CAAA,wFAAA,xFAAMP;;AAAN,AAiBA,qEAAA,rEAAMY,kJACHV,KAAKG,GAAGQ;AADX,AAEE,GAAMJ;AAAN,AACE,oBAAM,oGAAA,pGAACD,4FAAYN,KAAKG;AAAxB,AACE,6FAAA,uGAAA,0EAAA,9QAACM,4NAAsC,4CAAKT,qBAAqBG;;AADnE;;AADF;;AAGA,gJAAA,hJAACS,mDAAMlB,0EAAkBmB,sGAAUb,KAAKG,WAAIQ;;AAC5CA;;AAGF,AAAA,mEAAA,2EAAAf,9IAAMmB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,+FAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+FAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAhB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iGAAA,jGAAMgB;AAAN,AAEG,uGAAA,hGAACC,sBAAOtB;;;AAFX,CAAA,iGAAA,jGAAMqB,4GAIFf;AAJJ,AAKG,oBAAQ,CAACP,wFAAAA,8FAAAA,RAAMO,2EAAAA;AAAf;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AACA,OAACa,mDAAMlB,0EAAkBuB,iBAAOjB;;;AANnC,CAAA,iGAAA,jGAAMe,4GAQFf,KAAKG;AART,AASG,oBAAQ,CAACV,wFAAAA,8FAAAA,RAAMO,2EAAAA;AAAf;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AACA,oBAAI,AAACO,4FAAYN,KAAKG;AACpB,+JAAA,xJAACS,0DAAMlB,0EAAkBwB,uGAAWlB,aAAMiB,mEAAOd;;AACjD,oGAAA,uGAAA,0EAAA,9QAACM,4NAAsC,4CAAKT,oBAAoB,iDAAA,JAAKG;;;;AAZ1E,CAAA,2FAAA,3FAAMY;;AAAN","names":["mranderson048.re-frame.v0v10v2.re-frame.registrar/kinds","mranderson048.re-frame.v0v10v2.re-frame.registrar/kind->id->handler","cljs.core.atom","var_args","G__18545","mranderson048.re-frame.v0v10v2.re-frame.registrar/get-handler","js/Error","kind","cljs.core/deref","cljs.core.get","id","required?","handler","mranderson048.re_frame.v0v10v2.re_frame.registrar.get_handler","mranderson048.re-frame.v0v10v2.re-frame.interop/debug-enabled?","and__5000__auto__","mranderson048.re_frame.v0v10v2.re_frame.loggers.console","mranderson048.re-frame.v0v10v2.re-frame.registrar/register-handler","handler-fn","cljs.core.swap_BANG_","cljs.core/assoc-in","G__18557","mranderson048.re-frame.v0v10v2.re-frame.registrar/clear-handlers","cljs.core/reset!","cljs.core/dissoc","cljs.core/update-in"],"sourcesContent":["(ns mranderson048.re-frame.v0v10v2.re-frame.registrar\n  \"In many places, mranderson048.re-frame.v0v10v2.re-frame asks you to associate an `id` (keyword)\n  with a `handler` (function).  This namespace contains the\n  central registry of such associations.\"\n  (:require  [mranderson048.re-frame.v0v10v2.re-frame.interop :refer [debug-enabled?]]\n             [mranderson048.re-frame.v0v10v2.re-frame.loggers :refer [console]]))\n\n\n;; kinds of handlers\n(def kinds #{:event :fx :cofx :sub})\n\n;; This atom contains a register of all handlers.\n;; Contains a two layer map, keyed first by `kind` (of handler), and then `id` of handler.\n;; Leaf nodes are handlers.\n(def kind->id->handler  (atom {}))\n\n\n(defn get-handler\n\n  ([kind]\n   (get @kind->id->handler kind))\n\n  ([kind id]\n   (-> (get @kind->id->handler kind)\n       (get id)))\n\n  ([kind id required?]\n   (let [handler (get-handler kind id)]\n     (when debug-enabled?                          ;; This is in a separate `when` so Closure DCE can run ...\n       (when (and required? (nil? handler))        ;; ...otherwise you'd need to type-hint the `and` with a ^boolean for DCE.\n         (console :error \"re-frame: no \" (str kind) \" handler registered for: \" id)))\n     handler)))\n\n\n(defn register-handler\n  [kind id handler-fn]\n  (when debug-enabled?                                       ;; This is in a separate when so Closure DCE can run\n    (when (get-handler kind id false)\n      (console :warn \"re-frame: overwriting\" (str kind) \"handler for:\" id)))   ;; allow it, but warn. Happens on figwheel reloads.\n  (swap! kind->id->handler assoc-in [kind id] handler-fn)\n  handler-fn)    ;; note: returns the just registered handler\n\n\n(defn clear-handlers\n  ([]            ;; clear all kinds\n   (reset! kind->id->handler {}))\n\n  ([kind]        ;; clear all handlers for this kind\n   (assert (kinds kind))\n   (swap! kind->id->handler dissoc kind))\n\n  ([kind id]     ;; clear a single handler for a kind\n   (assert (kinds kind))\n   (if (get-handler kind id)\n     (swap! kind->id->handler update-in [kind] dissoc id)\n     (console :warn \"re-frame: can't clear\" (str kind) \"handler for\" (str id \". Handler not found.\")))))\n"],"x_google_ignoreList":[0]}
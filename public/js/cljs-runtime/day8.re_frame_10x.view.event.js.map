{"version":3,"sources":["day8/re_frame_10x/view/event.cljs"],"mappings":"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","names":["day8.re-frame-10x.view.event/code-border","day8.re-frame-10x.common-styles/white-background-border-color","day8.re-frame-10x.view.event/event-styles","day8.re-frame-10x.common-styles/navbar-tint-lighter","day8.re-frame-10x.common-styles/navbar-text-color","day8.re-frame-10x.common-styles/gs-19","day8.re-frame-10x.common-styles/gs-12","mranderson048.garden.v1v3v3.garden.units/px-","day8.re-frame-10x.common-styles/expansion-button-horizontal-padding","day8.re-frame-10x.view.event/no-event-instructions","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/p","day8.re-frame-10x.utils.re-com/hyperlink-href","day8.re-frame-10x.view.event/code-header","code-execution-id","line","cljs.core/deref","open?-path","G__23366","mranderson048.re-frame.v0v10v2.re-frame.core/subscribe","max-column-width","G__23369","trace-id","open?","cljs.core.get_in","G__23371","line-str","day8.re_frame_10x.utils.pretty_print_condensed.pr_str_truncated","=>str","result-length","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.utils.re-com/box","event","G__23376","mranderson048.re-frame.v0v10v2.re-frame.core/dispatch","cljs.core/not","day8.re-frame-10x.utils.utils/copy-to-clipboard","cljs.core.pr_str","cljs.core/List","G__23379","day8.re-frame-10x.view.event/code-block","day8.re-frame-10x.view.components/simple-render","G__23385","day8.re-frame-10x.view.event/find-bounds","form-str","search-str","re","cljs.core/re-pattern","js/goog.string.regExpEscape","result","index","pre-match","matched-form","cljs.core/count","start","clojure.string.index_of","length","day8.re-frame-10x.view.event/event-expression","scroll-pos","cljs.core.atom","mranderson048.reagent.v0v8v0.reagent.core/create-class","this","node","mranderson048.reagent.v0v8v0.reagent.core/dom-node","cljs.core/reset!","vec__23420","cljs.core.nth","highlighted-form","G__23423","G__23425","show-all-code?","G__23426","start-index","end-index","zprint.core/zprint-str","before","cljs.core.subs","highlight","after","day8.re-frame-10x.common-styles/white-background-color","G__23428","day8.re-frame-10x.view.components/highlight","day8.re-frame-10x.view.event/repl-msg-area","repl-msg-state","G__23430","cljs.core.get","cljs.core.gensym","G__23432","day8.re-frame-10x.view.event/repl-section","day8.re-frame-10x.utils.re-com/hyperlink","day8.re-frame-10x.common-styles/gs-7s","G__23434","day8.re-frame-10x.utils.re-com/hyperlink-info","day8.re-frame-10x.view.event/indent-block","indent-level","first?","cljs.core.doall","iter__5480__auto__","s__23438","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__23440","cljs.core/chunk-buffer","i__23439","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23437","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","num","cljs.core.range","day8.re-frame-10x.common-styles/standard-background-color","day8.re-frame-10x.view.event/event-fragments","fragments","code-exec-id","code-open?","G__23478","max-frags","s__23480","b__23482","i__23481","iter__23479","frag","cljs.core.take","id","G__23488","G__23492","G__23490","G__23493","G__23491","G__23494","day8.re-frame-10x.utils.re-com/label","day8.re-frame-10x.common-styles/gs-5s","day8.re-frame-10x.view.event/event-code","code-traces","G__23496","code-execution","cljs.core.remove","cljs.core/fn?","day8.re-frame-10x.view.event/render","epoch-id","G__23497","day8.re-frame-10x.common-styles/gs-19s","day8.re-frame-10x.utils.re-com/gap-f","cljs.core/chunk-first"],"sourcesContent":["(ns day8.re-frame-10x.view.event\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.common-styles :as common]\n            [mranderson048.garden.v1v3v3.garden.units :as units]\n            [mranderson048.reagent.v0v8v0.reagent.core :as reagent]\n            [mranderson048.re-frame.v0v10v2.re-frame.core :as rf]\n            [zprint.core :as zp]\n            [goog.string]\n            [clojure.string :as str]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [day8.re-frame-10x.utils.utils :as utils])\n  (:require-macros [day8.re-frame-10x.utils.macros :refer [with-cljs-devtools-prefs]]\n                   [day8.re-frame-10x.utils.re-com :refer [handler-fn]]))\n\n(def code-border (str \"1px solid \" common/white-background-border-color))\n\n\n(def event-styles\n  [:#--re-frame-10x--\n   [:.event-panel\n    {:padding \"19px 19px 0px 0px\"}]\n   [:.bold {:font-weight \"bold\"}]\n   [:.event-section]\n   [:.event-section--header\n    {:background-color common/navbar-tint-lighter\n     :color            common/navbar-text-color\n     :height           common/gs-19\n     :padding          [[0 common/gs-12]]\n     :overflow         \"hidden\"}]\n   [:.event-section--data\n    {:background-color \"rgba(100, 255, 100, 0.08)\"\n     :padding-left     (units/px- common/gs-12 common/expansion-button-horizontal-padding)\n     :overflow-x       \"auto\"\n     :overflow-y       \"hidden\"}]\n   ])\n\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n\n(defn no-event-instructions\n  []\n  [rc/v-box\n   :children [[rc/p {:style {:font-style \"italic\"}} \"Code trace is not currently available for this event\"]\n              [:br]\n              [rc/hyperlink-href\n               :label  \"Instructions for enabling Event Code Tracing\"\n               :attr   {:rel \"noopener noreferrer\"}\n               :target \"_blank\"\n               :href   \"https://github.com/Day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/EventCodeTracing.md\"]]])\n\n\n(defn code-header\n  [code-execution-id line]\n  (let [open?-path       [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]\n        max-column-width @(rf/subscribe [:code/max-column-width])\n        trace-id         code-execution-id\n        open?            (get-in @(rf/subscribe [:code/code-open?]) open?-path)\n        line-str         (pp/pr-str-truncated max-column-width (:form line))\n        =>str            \"=> \"\n        result-length    (- max-column-width (count =>str) (count line-str))]\n    [rc/h-box\n     :class    \"code-fragment__content\"\n     :size     \"1\"\n     :align    :center\n     :style    {:border   code-border\n                :overflow \"hidden\"\n                :padding  \"0px 6px\"}\n     :children [[rc/box\n                 :width  \"17px\"\n                 :height \"17px\"\n                 :class  \"noselect\"\n                 :style  {:cursor \"pointer\"\n                          :color  \"#b0b2b4\"}\n                 :attr   {:on-click (handler-fn (rf/dispatch [:code/set-code-visibility open?-path (not open?)]))}\n                 :child  [rc/box\n                          :margin \"auto\"\n                          :child  [:span.arrow (if open? \"\u25bc\" \"\u25b6\")]]]\n                [rc/h-box\n                 :size     \"1\"\n                 :style    {:overflow \"hidden\"}\n                 :children [[rc/box\n                             :style {:margin-left      \"2px\"\n                                     :white-space      \"nowrap\"}\n                             :child [:code line-str]]\n                            [rc/box\n                             :class \"code-fragment__result\"\n                             :style {:flex             \"1\"\n                                     :margin-left      \"8px\"\n                                     :white-space      \"nowrap\"}\n                             :child [:code =>str (when (pos? result-length)\n                                                   (pp/pr-str-truncated result-length (:result line)))]]]]\n                [rc/box\n                 :class \"code-fragment__button\"\n                 :attr {:title    \"Copy to the clipboard, an expression that will return this form's value in the cljs repl\"\n                        :on-click (handler-fn (do (utils/copy-to-clipboard (pr-str (list 'day8.re-frame-10x/traced-result trace-id (:id line))))\n                                                  (rf/dispatch [:code/repl-msg-state :start])))}\n                 :child \"repl\"]]]))\n\n\n(defn code-block\n  [code-execution-id line]\n  [rc/box\n   :size  \"1\"\n   :style {:background-color \"rgba(100, 255, 100, 0.08)\"\n           :border           code-border\n           :margin-top       \"-1px\"\n           :overflow-x       \"auto\"\n           :overflow-y       \"hidden\"\n           :padding          \"0px 3px\"}\n   :child [components/simple-render (:result line) [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]]])\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str]\n  (let [re         (re-pattern (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" (goog.string.regExpEscape search-str) \")\"))\n        result     (.exec re form-str)]\n    (if (some? result)\n      (let [index        (.-index result)\n            pre-match    (aget result 1)\n            matched-form (aget result 2)\n            index        (+ index (count pre-match))]\n        [index (+ index (count matched-form))])\n      ;; If the regex fails, fall back to string index just in case.\n      (let [start  (str/index-of form-str search-str)\n            length (if (and (some? search-str) (some? start))\n                     (count (pr-str search-str))\n                     0)]\n        [start (+ start length)]))))\n\n(defn event-expression\n  []\n  (let [scroll-pos (atom {:top 0 :left 0})]\n    (reagent/create-class\n      {:component-will-update\n       (fn event-expression-component-will-update [this]\n         (let [node (reagent/dom-node this)]\n           (reset! scroll-pos {:top (.-scrollTop node) :left (.-scrollLeft node)})))\n\n       :component-did-update\n       (fn event-expression-component-did-update [this]\n         (let [node (reagent/dom-node this)]\n           (set! (.-scrollTop node) (:top @scroll-pos))\n           (set! (.-scrollLeft node) (:left @scroll-pos))))\n\n       :display-name\n       \"event-expression\"\n\n       :reagent-render\n       (fn\n         []\n         (let [highlighted-form @(rf/subscribe [:code/highlighted-form])\n               form-str         @(rf/subscribe [:code/current-zprint-form])\n               show-all-code?   @(rf/subscribe [:code/show-all-code?])\n               [start-index end-index] (find-bounds form-str (zp/zprint-str highlighted-form))\n               before           (subs form-str 0 start-index)\n               highlight        (subs form-str start-index end-index)\n               after            (subs form-str end-index)]\n           ; DC: We get lots of React errors if we don't force a creation of a new element when the highlight changes. Not really sure why...\n           ;; Possibly relevant? https://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node\n           ^{:key (pr-str highlighted-form)}\n           [rc/box\n            :style {:max-height       (when-not show-all-code? (str (* 10 17) \"px\")) ;; Add scrollbar after 10 lines\n                    :overflow         \"auto\"\n                    :border           code-border\n                    :background-color common/white-background-color}\n            :attr {:on-double-click (handler-fn (rf/dispatch [:code/set-show-all-code? (not show-all-code?)]))}\n            :child (if (some? highlighted-form)\n                     [components/highlight {:language \"clojure\"}\n                      (list ^{:key \"before\"} before\n                            ^{:key \"hl\"} [:span.code-listing--highlighted highlight]\n                            ^{:key \"after\"} after)]\n                     [components/highlight {:language \"clojure\"}\n                      form-str])]))})))\n\n\n(defn repl-msg-area\n  []\n  (let [repl-msg-state @(rf/subscribe [:code/repl-msg-state])]\n    (when (get #{:running :re-running} repl-msg-state)\n      ^{:key (gensym)}\n      [:div\n       {:style            {:opacity            \"0\"\n                           :color              \"white\"\n                           :background-color   \"green\"\n                           :padding            \"0px 4px\"\n                           :white-space        \"nowrap\"\n                           :overflow           \"hidden\"\n                           :animation-duration \"5000ms\"\n                           :margin-right       \"5px\"\n                           :animation-name     \"fade-clipboard-msg-re-frame-10x\"}\n        :on-animation-end #(rf/dispatch [:code/repl-msg-state :end])}\n       \"Clipboard now contains text for pasting into the REPL\"])))\n\n\n(defn repl-section\n  []\n  [rc/h-box\n   :height   \"23px\"\n   :align    :end\n   :style    {:margin-bottom \"2px\"}\n   :children [[repl-msg-area]\n              [rc/box\n               :size \"1\"\n               :child \"\"]\n              [rc/hyperlink\n               :label \"repl requires\"\n               :style {:margin-right common/gs-7s}\n               :attr  {:title \"Copy to the clipboard, the require form to set things up for the \\\"repl\\\" links below\"}\n               ;; Doing this in a list would be nicer, but doesn't let us use ' as it will be expanded before we can create the string.\n               :on-click #(do (utils/copy-to-clipboard \"(require '[day8.re-frame-10x])\")\n                              (rf/dispatch [:code/repl-msg-state :start]))]\n              [rc/hyperlink-info \"https://github.com/Day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/UsingTheRepl.md\"]]])\n\n\n(defn indent-block\n  [indent-level first?]\n  [rc/h-box\n   :children (doall\n               (for [num (range indent-level)]\n                 [rc/box\n                  :width \"12px\"\n                  :style {:background-color common/standard-background-color\n                          :border-top       (when first? code-border)\n                          :border-left      code-border}\n                  :child \"\"]))])\n\n\n(defn event-fragments\n  [fragments code-exec-id]\n  (let [code-open? @(rf/subscribe [:code/code-open?])\n        max-frags  50]\n    [rc/v-box\n     :size     \"1\"\n     :style    {:overflow-y \"auto\"}\n     :children [(doall\n                  (for [frag (take max-frags fragments)]\n                    (let [id     (:id frag)\n                          first? (zero? id)]\n                      ^{:key id}\n                      [rc/v-box\n                       :class    \"code-fragment\"\n                       :style    {:margin-top (when-not first? \"-1px\")}\n                       :attr     {:on-mouse-enter (handler-fn (rf/dispatch [:code/hover-form (:form frag)]))\n                                  :on-mouse-leave (handler-fn (rf/dispatch [:code/exit-hover-form (:form frag)]))}\n                       :children [[rc/h-box\n                                   :children [[indent-block (:indent-level frag) first?]\n                                              [code-header code-exec-id frag]]]\n                                  (when (get-in code-open? [@(rf/subscribe [:epochs/current-epoch-id]) code-exec-id id])\n                                    [rc/h-box\n                                     :children [[indent-block (:indent-level frag) false]\n                                                [code-block code-exec-id frag id]]])]])))\n                (when (> (count fragments) max-frags)\n                  [rc/label\n                   :style {:margin-top common/gs-5s\n                           :font-style \"italic\"}\n                   :label (str \"(only showing first \" max-frags \" of \" (count fragments) \" traces)\")])]]))\n\n\n(defn event-code\n  []\n  (let [code-traces      @(rf/subscribe [:code/current-code])\n        code-execution   (first code-traces) ;; Ignore multiple code executions for now\n        #_#_debug?           @(rf/subscribe [:settings/debug?])\n        #_#_highlighted-form (rf/subscribe [:code/highlighted-form])]\n    (if-not code-execution\n      [no-event-instructions]\n      [rc/v-box\n       :size \"1 1 auto\"\n       :class \"code-panel\"\n       :children [#_(when debug? [:pre \"Hover \" (subs (pr-str @highlighted-form) 0 50) \"\\n\"])\n                  [event-expression]\n                  [repl-section]\n                  [event-fragments (->> (:code code-execution)\n                                        (remove (fn [line] (fn? (:result line)))))\n                   (:trace-id code-execution)]]])))\n\n\n(defn render []\n  (let [epoch-id @(rf/subscribe [:epochs/current-epoch-id])]\n    ;; Create a new id on each panel because Reagent can throw an exception if\n    ;; the data provided in successive renders is sufficiently different.\n    ^{:key epoch-id}\n    [rc/v-box\n     :size     \"1\"\n     :class    \"event-panel\"\n     :gap      common/gs-19s\n     :children [[event-code]\n                [rc/gap-f :size \"0px\"]]]))\n"],"x_google_ignoreList":[0]}
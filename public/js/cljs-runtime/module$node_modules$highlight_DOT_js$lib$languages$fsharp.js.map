{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$fsharp.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,GAA8E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AACtHD,QAAOC,CAAAA,OAAP,GAAiBC,QAAQ,CAACC,IAAD,CAAO;AAC9B,QAAIC,YAAY,CACdC,MAAO,MADO,EACFC,IAAK,MADH,EAEdC,SAAU,CACRJ,IAAKK,CAAAA,OAAL,CAAaL,IAAKM,CAAAA,UAAlB,EAA8B,CAACJ,MAAO,gBAAR,CAA9B,CADQ,CAFI,CAAhB;AAOA,WAAO,CACLK,QAAS,CAAC,IAAD,CADJ,EAELC,SACE,uXAHG,EASLC,QAAS,MATJ,EAULL,SAAU,CACR,CAEEM,UAAW,SAFb,EAGER,MAAO,0BAHT,CADQ,EAMR,CACEQ,UAAW,QADb;AAEER,UAAO,IAFT,EAEeC,IAAK,GAFpB,EAGEC,SAAU,CAAC,CAACF,MAAO,IAAR,CAAD,CAHZ,CANQ,EAWR,CACEQ,UAAW,QADb,EAEER,MAAO,KAFT,EAEgBC,IAAK,KAFrB,CAXQ,EAeRH,IAAKW,CAAAA,OAAL,CAAa,QAAb,EAAuB,QAAvB,CAfQ,EAgBR,CACED,UAAW,OADb,EAEEE,cAAe,MAFjB,EAEyBT,IAAK,YAF9B,EAEyCU,WAAY,CAAA,CAFrD,EAGET,SAAU,CACRJ,IAAKc,CAAAA,qBADG,EAERb,SAFQ,CAHZ,CAhBQ,EAwBR,CACES,UAAW,MADb,EAEER,MAAO,SAFT,EAEiBC,IAAK,SAFtB,EAGEY,UAAW,EAHb,CAxBQ,EA6BR,CACEL,UAAW,QADb,EAEER,MAAO,mBAFT,EAGEE,SAAU,CAACJ,IAAKgB,CAAAA,gBAAN,CAHZ,CA7BQ,EAkCRhB,IAAKiB,CAAAA,mBAlCG,EAmCRjB,IAAKK,CAAAA,OAAL,CAAaL,IAAKkB,CAAAA,iBAAlB,EAAqC,CAACT,QAAS,IAAV,CAArC,CAnCQ,EAoCRT,IAAKmB,CAAAA,aApCG,CAVL,CAAP;AAR8B,GAAhC;AADsH,CAAtH;;",
"sources":["node_modules/highlight_DOT_js/lib/languages/fsharp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$fsharp\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n  var TYPEPARAM = {\n    begin: '<', end: '>',\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {begin: /'[a-zA-Z0-9_]+/})\n    ]\n  };\n\n  return {\n    aliases: ['fs'],\n    keywords:\n      'abstract and as assert base begin class default delegate do done ' +\n      'downcast downto elif else end exception extern false finally for ' +\n      'fun function global if in inherit inline interface internal lazy let ' +\n      'match member module mutable namespace new null of open or ' +\n      'override private public rec return sig static struct then to ' +\n      'true try type upcast use val void when while with yield',\n    illegal: /\\/\\*/,\n    contains: [\n      {\n        // monad builder keywords (matches before non-bang kws)\n        className: 'keyword',\n        begin: /\\b(yield|return|let|do)!/\n      },\n      {\n        className: 'string',\n        begin: '@\"', end: '\"',\n        contains: [{begin: '\"\"'}]\n      },\n      {\n        className: 'string',\n        begin: '\"\"\"', end: '\"\"\"'\n      },\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\n      {\n        className: 'class',\n        beginKeywords: 'type', end: '\\\\(|=|$', excludeEnd: true,\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          TYPEPARAM\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '\\\\[<', end: '>\\\\]',\n        relevance: 10\n      },\n      {\n        className: 'symbol',\n        begin: '\\\\B(\\'[A-Za-z])\\\\b',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      hljs.C_NUMBER_MODE\n    ]\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","TYPEPARAM","begin","end","contains","inherit","TITLE_MODE","aliases","keywords","illegal","className","COMMENT","beginKeywords","excludeEnd","UNDERSCORE_TITLE_MODE","relevance","BACKSLASH_ESCAPE","C_LINE_COMMENT_MODE","QUOTE_STRING_MODE","C_NUMBER_MODE"]
}

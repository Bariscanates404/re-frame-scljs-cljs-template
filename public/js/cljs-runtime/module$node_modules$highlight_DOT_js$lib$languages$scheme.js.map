{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$scheme.js",
"lineCount":11,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,GAA8E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AACtHD,QAAOC,CAAAA,OAAP,GAAiBC,QAAQ,CAACC,IAAD,CAAO;AA+C9B,QAAIC,UAAU,CACZC,UAAW,SADC,EAEZC,MAAO,2DAFK,CAAd,EAKIC,SAAS,CACXF,UAAW,QADA,EAEXG,SAAU,CACR,CAAEF,MArDwBG,2BAqD1B,EAAkCC,UAAW,CAA7C,CADQ,EAER,CAAEJ,MArDyBK,2DAqD3B,EAAmCD,UAAW,CAA9C,CAFQ,EAGR,CAAEJ,MAAO,oBAAT,CAHQ,EAIR,CAAEA,MAAO,oBAAT,CAJQ,EAKR,CAAEA,MAAO,0BAAT,CALQ,CAFC,CALb,EAgBIM,SAAST,IAAKU,CAAAA,iBAhBlB;AAwBIC,QAAAA,GAAgB,CAClBX,IAAKY,CAAAA,OAAL,CACE,GADF,EAEE,GAFF,EAGE,CACEL,UAAW,CADb,CAHF,CADkB,EAQlBP,IAAKY,CAAAA,OAAL,CAAa,MAAb,EAAqB,MAArB,CARkB,CAAhBD;AAWJ,QAAIE,QAAQ,CACVV,MAlFoBW,uCAiFV,EAEVP,UAAW,CAFD,CAAZ,EAKIQ,eAAe,CACjBb,UAAW,QADM,EAEjBC,MAAO,wCAFU,CALnB,EAUIa,OAAO,CACTC,eAAgB,CAAA,CADP,EAETV,UAAW,CAFF,CAVX,EAeIW,cAAc,CAChBb,SAAU,CACR,CAAEF,MAAO,GAAT,CADQ,EAER,CAAEA,MAAO,GAAT,CAFQ,CADM,EAKhBgB,SAAU,CACR,CACEhB,MAAO,KADT,EACgBiB,IAAK,KADrB,EAEED,SAAU,CAAC,MAAD,EAASlB,OAAT,EAAkBQ,MAAlB,EAA0BL,MAA1B,EAAkCS,KAAlC,EAAyCE,YAAzC,CAFZ,CADQ,CALM,CAflB,EA4BIM,OAAO,CACTnB,UAAW,MADF,EAETC,MA/GoBW,uCA6GX,EAGTQ,QAhHoBR,uCA6GX,EAITS,SA9GaC,CACb,eACE,qxEAFWA,CA0GJ,CA5BX;AA8CIC,QAAAA,GAAO,CACTpB,SAAU,CACR,CAAEF,MAAO,KAAT,EAAgBiB,IAAK,KAArB,CADQ,EAER,CAAEjB,MAAO,KAAT,EAAgBiB,IAAK,KAArB,CAFQ,CADD,EAKTD,SAAU,CAhBCO,CACXvB,MAAO,QADIuB,EACMT,eAAgB,CAAA,CADtBS,EAC4BC,YAAa,CAAA,CADzCD,EAEXP,SAAU,CACRE,IADQ,EAER,CACElB,MAAO,IADT,EACeiB,IAAK,IADpB,EAC0BQ,WAAY,CAAA,CADtC,EAEET,SAAU,CAACN,KAAD,CAFZ,CAFQ,CAFCa,CAgBD,EAASL,IAAT,EAAeL,IAAf,CALD,CAAPS;AAQJT,QAAKG,CAAAA,QAAL,GAAgB,CAAClB,OAAD,EAAUG,MAAV,EAAkBK,MAAlB,EAA0BI,KAA1B,EAAiCE,YAAjC,EAA+CG,WAA/C,EAA4DO,IAA5D,CAAkEI,CAAAA,MAAlE,CAAyElB,IAAzE,CAAhB;AAEA,WAAO,CACLmB,QAAS,IADJ,EAELX,SAAU,CAnGEY,CACZ7B,UAAW,MADC6B,EAEZ5B,MAAO,KAFK4B,EAGZX,IAAK,GAHOW,CAmGF,EAAU3B,MAAV,EAAkBK,MAAlB,EAA0BM,YAA1B,EAAwCG,WAAxC,EAAqDO,IAArD,CAA2DI,CAAAA,MAA3D,CAAkElB,IAAlE,CAFL,CAAP;AA1I8B,GAAhC;AADsH,CAAtH;;",
"sources":["node_modules/highlight_DOT_js/lib/languages/scheme.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$scheme\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n  var SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n  var SCHEME_SIMPLE_NUMBER_RE = '(\\\\-|\\\\+)?\\\\d+([./]\\\\d+)?';\n  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n  var BUILTINS = {\n    'builtin-name':\n      'case-lambda call/cc class define-class exit-handler field import ' +\n      'inherit init-field interface let*-values let-values let/ec mixin ' +\n      'opt-lambda override protect provide public rename require ' +\n      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +\n      'when with-syntax and begin call-with-current-continuation ' +\n      'call-with-input-file call-with-output-file case cond define ' +\n      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +\n      'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' +\n      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +\n      'boolean? caar cadr call-with-input-file call-with-output-file ' +\n      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +\n      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +\n      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +\n      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +\n      'char? close-input-port close-output-port complex? cons cos ' +\n      'current-input-port current-output-port denominator display eof-object? ' +\n      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +\n      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +\n      'integer? interaction-environment lcm length list list->string ' +\n      'list->vector list-ref list-tail list? load log magnitude make-polar ' +\n      'make-rectangular make-string make-vector max member memq memv min ' +\n      'modulo negative? newline not null-environment null? number->string ' +\n      'number? numerator odd? open-input-file open-output-file output-port? ' +\n      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +\n      'rational? rationalize read read-char real-part real? remainder reverse ' +\n      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +\n      'string->list string->number string->symbol string-append string-ci<=? ' +\n      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +\n      'string-fill! string-length string-ref string-set! string<=? string<? ' +\n      'string=? string>=? string>? string? substring symbol->string symbol? ' +\n      'tan transcript-off transcript-on truncate values vector ' +\n      'vector->list vector-fill! vector-length vector-ref vector-set! ' +\n      'with-input-from-file with-output-to-file write write-char zero?'\n  };\n\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!',\n    end: '$'\n  };\n\n  var LITERAL = {\n    className: 'literal',\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n  };\n\n  var NUMBER = {\n    className: 'number',\n    variants: [\n      { begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 },\n      { begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 },\n      { begin: '#b[0-1]+(/[0-1]+)?' },\n      { begin: '#o[0-7]+(/[0-7]+)?' },\n      { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }\n    ]\n  };\n\n  var STRING = hljs.QUOTE_STRING_MODE;\n\n  var REGULAR_EXPRESSION = {\n    className: 'regexp',\n    begin: '#[pr]x\"',\n    end: '[^\\\\\\\\]\"'\n  };\n\n  var COMMENT_MODES = [\n    hljs.COMMENT(\n      ';',\n      '$',\n      {\n        relevance: 0\n      }\n    ),\n    hljs.COMMENT('#\\\\|', '\\\\|#')\n  ];\n\n  var IDENT = {\n    begin: SCHEME_IDENT_RE,\n    relevance: 0\n  };\n\n  var QUOTED_IDENT = {\n    className: 'symbol',\n    begin: '\\'' + SCHEME_IDENT_RE\n  };\n\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n\n  var QUOTED_LIST = {\n    variants: [\n      { begin: /'/ },\n      { begin: '`' }\n    ],\n    contains: [\n      {\n        begin: '\\\\(', end: '\\\\)',\n        contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]\n      }\n    ]\n  };\n\n  var NAME = {\n    className: 'name',\n    begin: SCHEME_IDENT_RE,\n    lexemes: SCHEME_IDENT_RE,\n    keywords: BUILTINS\n  };\n\n  var LAMBDA = {\n    begin: /lambda/, endsWithParent: true, returnBegin: true,\n    contains: [\n      NAME,\n      {\n        begin: /\\(/, end: /\\)/, endsParent: true,\n        contains: [IDENT],\n      }\n    ]\n  };\n\n  var LIST = {\n    variants: [\n      { begin: '\\\\(', end: '\\\\)' },\n      { begin: '\\\\[', end: '\\\\]' }\n    ],\n    contains: [LAMBDA, NAME, BODY]\n  };\n\n  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);\n\n  return {\n    illegal: /\\S/,\n    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","LITERAL","className","begin","NUMBER","variants","SCHEME_SIMPLE_NUMBER_RE","relevance","SCHEME_COMPLEX_NUMBER_RE","STRING","QUOTE_STRING_MODE","COMMENT_MODES","COMMENT","IDENT","SCHEME_IDENT_RE","QUOTED_IDENT","BODY","endsWithParent","QUOTED_LIST","contains","end","NAME","lexemes","keywords","BUILTINS","LIST","LAMBDA","returnBegin","endsParent","concat","illegal","SHEBANG"]
}

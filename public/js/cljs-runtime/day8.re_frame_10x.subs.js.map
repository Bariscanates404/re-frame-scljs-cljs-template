{"version":3,"sources":["day8/re_frame_10x/subs.cljs"],"mappings":"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","names":["G__23868","G__23869","mranderson048.re-frame.v0v10v2.re-frame.core/reg-sub","db","_","cljs.core.get","G__23872","G__23873","G__23874","G__23875","settings","G__23878","G__23879","G__23880","G__23881","p__23882","vec__23883","cljs.core.nth","panel-width%","n","Math/ceil","G__23898","G__23899","G__23900","G__23901","G__23902","G__23903","G__23904","G__23905","p__23906","vec__23907","width","G__23910","G__23911","G__23912","G__23913","G__23914","G__23915","G__23916","G__23917","G__23920","G__23921","G__23922","G__23923","G__23924","G__23925","G__23926","G__23927","cljs.core.sort_by","cljs.core/vals","G__23935","G__23936","G__23937","G__23938","G__23939","G__23940","G__23941","G__23942","G__23943","G__23944","G__23947","G__23949","G__23950","G__23951","G__23952","G__23953","G__23957","G__23958","G__23959","G__23960","G__23961","G__23962","trace","cljs.core.get_in","G__23963","G__23964","G__23965","G__23966","G__23971","G__23972","G__23973","G__23974","app-db-settings","p1__23970#","cljs.core.map","cljs.core.assoc","cljs.core/val","cljs.core/key","G__23975","G__23976","G__23977","G__23978","G__23983","G__23984","G__23985","G__23986","G__23989","G__23990","G__23991","G__23992","p__23996","vec__23997","expansions","path","cljs.core/contains?","G__24000","G__24001","G__24002","G__24003","root","G__24004","G__24005","G__24006","G__24007","G__24008","G__24009","G__24010","G__24011","G__24019","G__24020","G__24021","G__24022","G__24023","G__24024","traces","G__24025","G__24026","G__24027","G__24028","cljs.core/count","G__24029","G__24030","G__24031","G__24032","G__24033","G__24034","G__24035","G__24036","p__24037","vec__24041","beginning","ending","cljs.core.into","day8.re-frame-10x.utils.utils/id-between-xf","p__24044","vec__24045","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp","cljs.core/munge","cljs.core/set","cljs.core.remove","day8.re-frame-10x.metamorphic/render?","cljs.core.subs","clojure.string.last_index_of","G__24048","G__24049","G__24050","G__24051","G__24052","G__24053","G__24054","G__24055","G__24056","G__24057","G__24058","G__24059","G__24063","G__24064","G__24065","G__24066","trace-root","G__24067","G__24068","G__24069","G__24070","G__24075","G__24076","G__24077","G__24078","snapshot","G__24080","G__24081","G__24082","G__24083","G__24084","G__24085","G__24086","G__24087","p__24088","vec__24089","epochs","match-ids","current-id","match","cljs.core/last","cljs.core/first","G__24094","G__24095","G__24096","G__24097","match-state","G__24099","G__24100","G__24101","G__24102","day8.re-frame-10x.metamorphic/matched-event","G__24103","G__24104","G__24105","G__24106","G__24107","G__24108","G__24109","G__24110","G__24116","G__24117","G__24118","G__24119","G__24128","G__24129","G__24130","G__24131","G__24132","G__24133","G__24134","G__24135","G__24136","G__24137","G__24138","G__24139","G__24140","G__24141","G__24142","G__24143","G__24144","G__24145","G__24146","G__24147","G__24148","G__24149","p__24150","vec__24151","current","ids","G__24154","G__24155","G__24156","G__24157","G__24158","G__24159","p__24160","vec__24161","day8.re-frame-10x.utils.utils/last-in-vec","G__24168","G__24169","G__24170","G__24171","start-of-epoch","end-of-epoch","day8.re-frame-10x.metamorphic/elapsed-time","G__24173","G__24174","G__24175","G__24176","p1__24172#","cljs.core.filter","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","G__24177","G__24178","G__24179","G__24180","frame-traces","var_args","G__24185","day8.re-frame-10x.subs/+nil","args-arr__5751__auto__","len__5726__auto__","i__5727__auto__","argseq__5752__auto__","cljs.core/IndexedSeq","seq24182","G__24183","cljs.core/next","G__24184","self__5711__auto__","x","y","more","cljs.core.reduce","cljs.core/+","G__24186","G__24187","G__24188","G__24189","G__24190","G__24191","p__24192","p__24193","vec__24194","vec__24197","af-start-end","epoch-traces","frame-number","vec__24200","frame-pairs","cljs.core.partition","start","end","af-traces","day8.re-frame-10x.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce","day8.re-frame-10x.metamorphic/subscription?","render-time","G__24207","G__24208","G__24209","G__24210","map__24211","cljs.core/--destructure-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","G__24212","G__24213","G__24214","G__24215","start-of-render","G__24216","G__24217","G__24218","G__24219","cljs.core/empty?","G__24220","G__24221","G__24222","G__24223","G__24224","G__24225","G__24226","G__24227","G__24228","G__24229","epoch","G__24230","G__24231","G__24232","G__24233","G__24234","G__24235","G__24236","G__24237","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","p1__24238#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl","G__24309","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__24310","cljs.core/map?","G__24334","day8.re-frame-10x.subs/sub-type-value","sub-type","G__24335","cljs.core/Keyword","day8.re-frame-10x.subs/accumulate-sub-value","order","exp","total","temp__5802__auto__","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame-10x.subs/sub-op-type->type","t","G__24340","p__24349","p__24350","vec__24351","vec__24354","day8.re-frame-10x.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_","me","cljs.core/constantly","subx","state","sub","cljs.core.pr_str","or__5002__auto__","G__24360","G__24361","G__24362","G__24363","G__24364","G__24365","G__24366","G__24367","G__24368","G__24369","G__24370","G__24371","G__24372","G__24373","G__24374","G__24375","G__24376","G__24377","G__24378","G__24379","G__24380","G__24381","G__24382","G__24383","G__24384","G__24385","p__24390","vec__24391","all-subs","ignore-unchanged-l2?","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","G__24394","G__24395","G__24396","G__24397","subs","cljs.core.mapcat","cljs.core/frequencies","G__24398","G__24399","G__24400","G__24401","counts","G__24402","G__24403","G__24404","G__24405","G__24408","G__24409","G__24410","G__24411","G__24412","G__24413","G__24414","G__24415","G__24416","G__24417","G__24418","G__24419","G__24421","G__24422","G__24423","G__24424","G__24425","G__24426","G__24427","G__24428","G__24429","G__24430","G__24432","G__24433","G__24434","G__24435","cljs.core.keep_indexed","i","temp__5808__auto__","code","cljs.core.map_indexed","cljs.core/vec","G__24439","G__24440","G__24441","G__24442","G__24444","G__24445","G__24446","G__24447","form","zprint.core/zprint-str","G__24448","G__24449","G__24450","G__24451","G__24452","G__24453","G__24454","G__24455","G__24456","G__24457","G__24458","G__24459","G__24460","G__24461","G__24462","G__24463","day8.re-frame-10x.subs/canvas","js/document.createElement","G__24464","G__24465","context","G__24466","G__24467","G__24468","G__24469","G__24470","G__24471","p__24474","vec__24475","window-width","char-width","G__24479","G__24480","G__24481","G__24482","G__24483","G__24484","component"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [mranderson048.re-frame.v0v10v2.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/panel-width%-rounded\n  :<- [:settings/panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  :settings/window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :window-width)))\n\n(rf/reg-sub\n  :settings/window-width-rounded\n  :<- [:settings/window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/current-match]\n  (fn [epochs _]\n    (:id (first epochs))))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  (fn [[all-subs ignore-unchanged-l2?]]\n    (if ignore-unchanged-l2?\n      (remove metam/unchanged-l2-subscription? all-subs)\n      all-subs)))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id       i\n                       :trace-id (:id trace)\n                       :title    (pr-str (:op-type trace))\n                       :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form     (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/show-all-code?\n  :<- [:code/root]\n  (fn [code _]\n    (:show-all-code? code)))\n\n(rf/reg-sub\n  :code/repl-msg-state\n  :<- [:code/root]\n  (fn [code _]\n    (:repl-msg-state code)))\n\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  :code/single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n    :code/max-column-width\n    :<- [:settings/window-width-rounded 100]\n    :<- [:code/single-character-width]\n    ;; It seems like it would be possible to do something smarter responding to panel sizing,\n    ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n    (fn [[window-width char-width] _]\n      (Math/ceil (/ window-width\n                    char-width))))\n\n;;\n\n(rf/reg-sub\n  :component/root\n  (fn [db _]\n    (:component db)))\n\n(rf/reg-sub\n  :component/direction\n  :<- [:component/root]\n  (fn [component _]\n    (:direction component)))\n"],"x_google_ignoreList":[0]}
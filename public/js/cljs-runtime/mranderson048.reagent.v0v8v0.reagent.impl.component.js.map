{"version":3,"sources":["mranderson048/reagent/v0v8v0/reagent/impl/component.cljs"],"mappings":"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","names":["mranderson048.reagent.v0v8v0.reagent.impl.component/shallow-obj-to-map","o","ks","cljs.core/js-keys","len","m","i","k","cljs.core.assoc","cljs.core.keyword","mranderson048.reagent.v0v8v0.reagent.impl.component/extract-props","v","p","cljs.core.nth","cljs.core/map?","mranderson048.reagent.v0v8v0.reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec","mranderson048.reagent.v0v8v0.reagent.impl.component/props-argv","c","temp__5806__auto__","a","mranderson048.reagent.v0v8v0.reagent.impl.component/get-argv","mranderson048.reagent.v0v8v0.reagent.impl.component/get-props","mranderson048.reagent.v0v8v0.reagent.impl.component/get-children","js/module$node_modules$react$index.Children.toArray","cljs.core.into","mranderson048.reagent.v0v8v0.reagent.impl.component/reagent-class?","cljs.core/fn?","G__18199","mranderson048.reagent.v0v8v0.reagent.impl.component/react-class?","G__18201","mranderson048.reagent.v0v8v0.reagent.impl.component/reagent-component?","mranderson048.reagent.v0v8v0.reagent.impl.component/cached-react-class","mranderson048.reagent.v0v8v0.reagent.impl.component/cache-react-class","constructor","mranderson048.reagent.v0v8v0.reagent.impl.component/state-atom","this","sa","mranderson048.reagent.v0v8v0.reagent.ratom.atom","js/mranderson048","js/mranderson048.reagent","js/mranderson048.reagent.v0v8v0","js/mranderson048.reagent.v0v8v0.reagent","js/mranderson048.reagent.v0v8v0.reagent.impl","js/mranderson048.reagent.v0v8v0.reagent.impl.component","js/mranderson048.reagent.v0v8v0.reagent.impl.component.as-element","mranderson048.reagent.v0v8v0.reagent.impl.component/as-element","mranderson048.reagent.v0v8v0.reagent.impl.component/wrap-render","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str","res","n","G__18209","cljs.core.into_array","cljs.core/vector?","args","G__18210","cljs.core.apply","cljs.core/vector","mranderson048.reagent.v0v8v0.reagent.impl.component/do-render","*current-component*-orig-val__18212","*current-component*-temp-val__18213","mranderson048.reagent.v0v8v0.reagent.impl.component/*current-component*","ok","mranderson048.reagent.v0v8v0.reagent.debug/has-console","mranderson048.reagent.v0v8v0.reagent.debug/tracking","mranderson048.reagent.v0v8v0.reagent.debug/track-console","js/console","mranderson048.reagent.v0v8v0.reagent.impl.component/comp-name","mranderson048.reagent.v0v8v0.reagent.impl.component/rat-opts","mranderson048.reagent.v0v8v0.reagent.impl.component/static-fns","mranderson048.reagent.v0v8v0.reagent.impl.util/*non-reactive*","rat","mranderson048.reagent.v0v8v0.reagent.impl.batching/mark-rendered","mranderson048.reagent.v0v8v0.reagent.ratom/run-in-reaction","mranderson048.reagent.v0v8v0.reagent.impl.batching/queue-render","mranderson048.reagent.v0v8v0.reagent.impl.component/custom-wrapper","key","G__18215","cljs.core/Keyword","cljs.core/reset!","nextprops","nextstate","or__5002__auto__","mranderson048.reagent.v0v8v0.reagent.impl.util/*always-update*","old-argv","new-argv","noargv","cljs.core.not_EQ_","oldprops","mranderson048.reagent.v0v8v0.reagent.impl.batching/next-mount-count","G__18217","mranderson048.reagent.v0v8v0.reagent.ratom/dispose!","error","info","mranderson048.reagent.v0v8v0.reagent.impl.component/get-wrapper","name","wrap","and__5000__auto__","mranderson048.reagent.v0v8v0.reagent.impl.component/obligatory","mranderson048.reagent.v0v8v0.reagent.impl.component/dash-to-camel","mranderson048.reagent.v0v8v0.reagent.impl.util/memoize-1","mranderson048.reagent.v0v8v0.reagent.impl.util/dash-to-camel","mranderson048.reagent.v0v8v0.reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","mranderson048.reagent.v0v8v0.reagent.impl.component/add-obligatory","cljs.core.merge","mranderson048.reagent.v0v8v0.reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","legacy-render","mranderson048.reagent.v0v8v0.reagent.impl.util/fun-name","G__18227","cljs.core.gensym","mranderson048.reagent.v0v8v0.reagent.impl.component/map-to-js","G__18231","cljs.core/name","mranderson048.reagent.v0v8v0.reagent.impl.component/cljsify","body","mranderson048.reagent.v0v8v0.reagent.impl.component/create-class","js/module$node_modules$create_react_class$index","mranderson048.reagent.v0v8v0.reagent.impl.component/fiber-component-path","fiber","G__18233","parent","G__18236","path","G__18237","cljs.core/empty?","mranderson048.reagent.v0v8v0.reagent.impl.component/component-path","temp__5802__auto__","G__18241","G__18242","instance","G__18243","G__18244","elem","G__18245","G__18246","G__18247","owner","G__18248","G__18249","G__18250","G__18252","mranderson048.reagent.v0v8v0.reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","mranderson048.reagent.v0v8v0.reagent.impl.component/as-class","tag","cached-class","mranderson048.reagent.v0v8v0.reagent.impl.component/reactify-component","comp"],"sourcesContent":["(ns mranderson048.reagent.v0v8v0.reagent.impl.component\n  (:require [create-react-class :as create-react-class]\n            [react :as react]\n            [mranderson048.reagent.v0v8v0.reagent.impl.util :as util]\n            [mranderson048.reagent.v0v8v0.reagent.impl.batching :as batch]\n            [mranderson048.reagent.v0v8v0.reagent.ratom :as ratom]\n            [mranderson048.reagent.v0v8v0.reagent.interop :refer-macros [$ $!]]\n            [mranderson048.reagent.v0v8v0.reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (not= old-argv new-argv))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       create-react-class))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     ($ :type)\n                     ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  ;; Try both original name (for UMD foreign-lib) and manged name (property access, for Closure optimized React)\n  (if-let [fiber (or (some-> c ($ :_reactInternalFiber))\n                     (some-> c (.-_reactInternalFiber)))]\n    (fiber-component-path fiber)\n    (let [instance (or (some-> c ($ :_reactInternalInstance))\n                       (some-> c (.-_reactInternalInstance))\n                       c)\n          elem (or (some-> instance ($ :_currentElement))\n                   (some-> instance (.-_currentElement)))\n          name (some-> elem\n                       ($ :type)\n                       ($ :displayName))\n          owner (or (some-> elem ($ :_owner))\n                    (some-> elem (.-_owner)))\n          path (some-> owner\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"],"x_google_ignoreList":[0]}